/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.specification.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.marketplace.specification.master.model.Specification;
import com.marketplace.specification.master.model.SpecificationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Specification service. Represents a row in the &quot;marketplace_specification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SpecificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpecificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpecificationImpl
 * @generated
 */
public class SpecificationModelImpl
	extends BaseModelImpl<Specification> implements SpecificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a specification model instance should use the <code>Specification</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_specification";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"specificationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"specificationLabel", Types.VARCHAR},
		{"specificationDescription", Types.VARCHAR},
		{"specificationFieldType", Types.BIGINT},
		{"specificationFieldDataType", Types.BIGINT},
		{"specificationPriority", Types.BIGINT}, {"isVariant", Types.BOOLEAN},
		{"specificationGroupId", Types.BIGINT},
		{"cpSpecificationId", Types.BIGINT},
		{"specificationStatus", Types.VARCHAR}, {"ipAddress", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specificationLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationFieldType", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specificationFieldDataType", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specificationPriority", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isVariant", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("specificationGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cpSpecificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specificationStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_specification (uuid_ VARCHAR(75) null,specificationId LONG not null primary key,groupId LONG,specificationLabel VARCHAR(75) null,specificationDescription VARCHAR(200) null,specificationFieldType LONG,specificationFieldDataType LONG,specificationPriority LONG,isVariant BOOLEAN,specificationGroupId LONG,cpSpecificationId LONG,specificationStatus VARCHAR(75) null,ipAddress VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,createdBy LONG,modifiedBy LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_specification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY specification.specificationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_specification.specificationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPECIFICATIONSTATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPECIFICATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SpecificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _specificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpecificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _specificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Specification.class;
	}

	@Override
	public String getModelClassName() {
		return Specification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Specification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Specification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Specification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Specification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Specification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Specification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Specification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Specification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Specification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Specification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Specification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Specification, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Specification, Object>>();
		Map<String, BiConsumer<Specification, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Specification, ?>>();

		attributeGetterFunctions.put("uuid", Specification::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Specification, String>)Specification::setUuid);
		attributeGetterFunctions.put(
			"specificationId", Specification::getSpecificationId);
		attributeSetterBiConsumers.put(
			"specificationId",
			(BiConsumer<Specification, Long>)Specification::setSpecificationId);
		attributeGetterFunctions.put("groupId", Specification::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Specification, Long>)Specification::setGroupId);
		attributeGetterFunctions.put(
			"specificationLabel", Specification::getSpecificationLabel);
		attributeSetterBiConsumers.put(
			"specificationLabel",
			(BiConsumer<Specification, String>)
				Specification::setSpecificationLabel);
		attributeGetterFunctions.put(
			"specificationDescription",
			Specification::getSpecificationDescription);
		attributeSetterBiConsumers.put(
			"specificationDescription",
			(BiConsumer<Specification, String>)
				Specification::setSpecificationDescription);
		attributeGetterFunctions.put(
			"specificationFieldType", Specification::getSpecificationFieldType);
		attributeSetterBiConsumers.put(
			"specificationFieldType",
			(BiConsumer<Specification, Long>)
				Specification::setSpecificationFieldType);
		attributeGetterFunctions.put(
			"specificationFieldDataType",
			Specification::getSpecificationFieldDataType);
		attributeSetterBiConsumers.put(
			"specificationFieldDataType",
			(BiConsumer<Specification, Long>)
				Specification::setSpecificationFieldDataType);
		attributeGetterFunctions.put(
			"specificationPriority", Specification::getSpecificationPriority);
		attributeSetterBiConsumers.put(
			"specificationPriority",
			(BiConsumer<Specification, Long>)
				Specification::setSpecificationPriority);
		attributeGetterFunctions.put("isVariant", Specification::getIsVariant);
		attributeSetterBiConsumers.put(
			"isVariant",
			(BiConsumer<Specification, Boolean>)Specification::setIsVariant);
		attributeGetterFunctions.put(
			"specificationGroupId", Specification::getSpecificationGroupId);
		attributeSetterBiConsumers.put(
			"specificationGroupId",
			(BiConsumer<Specification, Long>)
				Specification::setSpecificationGroupId);
		attributeGetterFunctions.put(
			"cpSpecificationId", Specification::getCpSpecificationId);
		attributeSetterBiConsumers.put(
			"cpSpecificationId",
			(BiConsumer<Specification, Long>)
				Specification::setCpSpecificationId);
		attributeGetterFunctions.put(
			"specificationStatus", Specification::getSpecificationStatus);
		attributeSetterBiConsumers.put(
			"specificationStatus",
			(BiConsumer<Specification, String>)
				Specification::setSpecificationStatus);
		attributeGetterFunctions.put("ipAddress", Specification::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress",
			(BiConsumer<Specification, String>)Specification::setIpAddress);
		attributeGetterFunctions.put("companyId", Specification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Specification, Long>)Specification::setCompanyId);
		attributeGetterFunctions.put("userId", Specification::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<Specification, Long>)Specification::setUserId);
		attributeGetterFunctions.put("userName", Specification::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Specification, String>)Specification::setUserName);
		attributeGetterFunctions.put(
			"createDate", Specification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Specification, Date>)Specification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Specification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Specification, Date>)Specification::setModifiedDate);
		attributeGetterFunctions.put("createdBy", Specification::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<Specification, Long>)Specification::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", Specification::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<Specification, Long>)Specification::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getSpecificationId() {
		return _specificationId;
	}

	@Override
	public void setSpecificationId(long specificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationId = specificationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public String getSpecificationLabel() {
		if (_specificationLabel == null) {
			return "";
		}
		else {
			return _specificationLabel;
		}
	}

	@Override
	public void setSpecificationLabel(String specificationLabel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationLabel = specificationLabel;
	}

	@Override
	public String getSpecificationDescription() {
		if (_specificationDescription == null) {
			return "";
		}
		else {
			return _specificationDescription;
		}
	}

	@Override
	public void setSpecificationDescription(String specificationDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationDescription = specificationDescription;
	}

	@Override
	public long getSpecificationFieldType() {
		return _specificationFieldType;
	}

	@Override
	public void setSpecificationFieldType(long specificationFieldType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationFieldType = specificationFieldType;
	}

	@Override
	public long getSpecificationFieldDataType() {
		return _specificationFieldDataType;
	}

	@Override
	public void setSpecificationFieldDataType(long specificationFieldDataType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationFieldDataType = specificationFieldDataType;
	}

	@Override
	public long getSpecificationPriority() {
		return _specificationPriority;
	}

	@Override
	public void setSpecificationPriority(long specificationPriority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationPriority = specificationPriority;
	}

	@Override
	public boolean getIsVariant() {
		return _isVariant;
	}

	@Override
	public boolean isIsVariant() {
		return _isVariant;
	}

	@Override
	public void setIsVariant(boolean isVariant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isVariant = isVariant;
	}

	@Override
	public long getSpecificationGroupId() {
		return _specificationGroupId;
	}

	@Override
	public void setSpecificationGroupId(long specificationGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationGroupId = specificationGroupId;
	}

	@Override
	public long getCpSpecificationId() {
		return _cpSpecificationId;
	}

	@Override
	public void setCpSpecificationId(long cpSpecificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cpSpecificationId = cpSpecificationId;
	}

	@Override
	public String getSpecificationStatus() {
		if (_specificationStatus == null) {
			return "";
		}
		else {
			return _specificationStatus;
		}
	}

	@Override
	public void setSpecificationStatus(String specificationStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationStatus = specificationStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSpecificationStatus() {
		return getColumnOriginalValue("specificationStatus");
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Specification.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Specification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Specification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Specification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpecificationImpl specificationImpl = new SpecificationImpl();

		specificationImpl.setUuid(getUuid());
		specificationImpl.setSpecificationId(getSpecificationId());
		specificationImpl.setGroupId(getGroupId());
		specificationImpl.setSpecificationLabel(getSpecificationLabel());
		specificationImpl.setSpecificationDescription(
			getSpecificationDescription());
		specificationImpl.setSpecificationFieldType(
			getSpecificationFieldType());
		specificationImpl.setSpecificationFieldDataType(
			getSpecificationFieldDataType());
		specificationImpl.setSpecificationPriority(getSpecificationPriority());
		specificationImpl.setIsVariant(isIsVariant());
		specificationImpl.setSpecificationGroupId(getSpecificationGroupId());
		specificationImpl.setCpSpecificationId(getCpSpecificationId());
		specificationImpl.setSpecificationStatus(getSpecificationStatus());
		specificationImpl.setIpAddress(getIpAddress());
		specificationImpl.setCompanyId(getCompanyId());
		specificationImpl.setUserId(getUserId());
		specificationImpl.setUserName(getUserName());
		specificationImpl.setCreateDate(getCreateDate());
		specificationImpl.setModifiedDate(getModifiedDate());
		specificationImpl.setCreatedBy(getCreatedBy());
		specificationImpl.setModifiedBy(getModifiedBy());

		specificationImpl.resetOriginalValues();

		return specificationImpl;
	}

	@Override
	public Specification cloneWithOriginalValues() {
		SpecificationImpl specificationImpl = new SpecificationImpl();

		specificationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		specificationImpl.setSpecificationId(
			this.<Long>getColumnOriginalValue("specificationId"));
		specificationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		specificationImpl.setSpecificationLabel(
			this.<String>getColumnOriginalValue("specificationLabel"));
		specificationImpl.setSpecificationDescription(
			this.<String>getColumnOriginalValue("specificationDescription"));
		specificationImpl.setSpecificationFieldType(
			this.<Long>getColumnOriginalValue("specificationFieldType"));
		specificationImpl.setSpecificationFieldDataType(
			this.<Long>getColumnOriginalValue("specificationFieldDataType"));
		specificationImpl.setSpecificationPriority(
			this.<Long>getColumnOriginalValue("specificationPriority"));
		specificationImpl.setIsVariant(
			this.<Boolean>getColumnOriginalValue("isVariant"));
		specificationImpl.setSpecificationGroupId(
			this.<Long>getColumnOriginalValue("specificationGroupId"));
		specificationImpl.setCpSpecificationId(
			this.<Long>getColumnOriginalValue("cpSpecificationId"));
		specificationImpl.setSpecificationStatus(
			this.<String>getColumnOriginalValue("specificationStatus"));
		specificationImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));
		specificationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		specificationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		specificationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		specificationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		specificationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		specificationImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		specificationImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));

		return specificationImpl;
	}

	@Override
	public int compareTo(Specification specification) {
		long primaryKey = specification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Specification)) {
			return false;
		}

		Specification specification = (Specification)object;

		long primaryKey = specification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Specification> toCacheModel() {
		SpecificationCacheModel specificationCacheModel =
			new SpecificationCacheModel();

		specificationCacheModel.uuid = getUuid();

		String uuid = specificationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			specificationCacheModel.uuid = null;
		}

		specificationCacheModel.specificationId = getSpecificationId();

		specificationCacheModel.groupId = getGroupId();

		specificationCacheModel.specificationLabel = getSpecificationLabel();

		String specificationLabel = specificationCacheModel.specificationLabel;

		if ((specificationLabel != null) &&
			(specificationLabel.length() == 0)) {

			specificationCacheModel.specificationLabel = null;
		}

		specificationCacheModel.specificationDescription =
			getSpecificationDescription();

		String specificationDescription =
			specificationCacheModel.specificationDescription;

		if ((specificationDescription != null) &&
			(specificationDescription.length() == 0)) {

			specificationCacheModel.specificationDescription = null;
		}

		specificationCacheModel.specificationFieldType =
			getSpecificationFieldType();

		specificationCacheModel.specificationFieldDataType =
			getSpecificationFieldDataType();

		specificationCacheModel.specificationPriority =
			getSpecificationPriority();

		specificationCacheModel.isVariant = isIsVariant();

		specificationCacheModel.specificationGroupId =
			getSpecificationGroupId();

		specificationCacheModel.cpSpecificationId = getCpSpecificationId();

		specificationCacheModel.specificationStatus = getSpecificationStatus();

		String specificationStatus =
			specificationCacheModel.specificationStatus;

		if ((specificationStatus != null) &&
			(specificationStatus.length() == 0)) {

			specificationCacheModel.specificationStatus = null;
		}

		specificationCacheModel.ipAddress = getIpAddress();

		String ipAddress = specificationCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			specificationCacheModel.ipAddress = null;
		}

		specificationCacheModel.companyId = getCompanyId();

		specificationCacheModel.userId = getUserId();

		specificationCacheModel.userName = getUserName();

		String userName = specificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			specificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			specificationCacheModel.createDate = createDate.getTime();
		}
		else {
			specificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			specificationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			specificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		specificationCacheModel.createdBy = getCreatedBy();

		specificationCacheModel.modifiedBy = getModifiedBy();

		return specificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Specification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Specification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Specification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Specification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Specification>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Specification.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _specificationId;
	private long _groupId;
	private String _specificationLabel;
	private String _specificationDescription;
	private long _specificationFieldType;
	private long _specificationFieldDataType;
	private long _specificationPriority;
	private boolean _isVariant;
	private long _specificationGroupId;
	private long _cpSpecificationId;
	private String _specificationStatus;
	private String _ipAddress;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Specification, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Specification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("specificationId", _specificationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("specificationLabel", _specificationLabel);
		_columnOriginalValues.put(
			"specificationDescription", _specificationDescription);
		_columnOriginalValues.put(
			"specificationFieldType", _specificationFieldType);
		_columnOriginalValues.put(
			"specificationFieldDataType", _specificationFieldDataType);
		_columnOriginalValues.put(
			"specificationPriority", _specificationPriority);
		_columnOriginalValues.put("isVariant", _isVariant);
		_columnOriginalValues.put(
			"specificationGroupId", _specificationGroupId);
		_columnOriginalValues.put("cpSpecificationId", _cpSpecificationId);
		_columnOriginalValues.put("specificationStatus", _specificationStatus);
		_columnOriginalValues.put("ipAddress", _ipAddress);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("specificationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("specificationLabel", 8L);

		columnBitmasks.put("specificationDescription", 16L);

		columnBitmasks.put("specificationFieldType", 32L);

		columnBitmasks.put("specificationFieldDataType", 64L);

		columnBitmasks.put("specificationPriority", 128L);

		columnBitmasks.put("isVariant", 256L);

		columnBitmasks.put("specificationGroupId", 512L);

		columnBitmasks.put("cpSpecificationId", 1024L);

		columnBitmasks.put("specificationStatus", 2048L);

		columnBitmasks.put("ipAddress", 4096L);

		columnBitmasks.put("companyId", 8192L);

		columnBitmasks.put("userId", 16384L);

		columnBitmasks.put("userName", 32768L);

		columnBitmasks.put("createDate", 65536L);

		columnBitmasks.put("modifiedDate", 131072L);

		columnBitmasks.put("createdBy", 262144L);

		columnBitmasks.put("modifiedBy", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Specification _escapedModel;

}