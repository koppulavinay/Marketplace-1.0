/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.checkout.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.marketplace.checkout.master.model.CheckoutCustom;
import com.marketplace.checkout.master.model.CheckoutCustomModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CheckoutCustom service. Represents a row in the &quot;marketplace_checkout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CheckoutCustomModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CheckoutCustomImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CheckoutCustomImpl
 * @generated
 */
public class CheckoutCustomModelImpl
	extends BaseModelImpl<CheckoutCustom> implements CheckoutCustomModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a checkout custom model instance should use the <code>CheckoutCustom</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_checkout";

	public static final Object[][] TABLE_COLUMNS = {
		{"checkoutCustomId", Types.BIGINT}, {"commerceOrderId", Types.BIGINT},
		{"requestJson", Types.VARCHAR}, {"responseJson", Types.VARCHAR},
		{"module", Types.VARCHAR}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("checkoutCustomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceOrderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestJson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseJson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("module", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_checkout (checkoutCustomId LONG not null primary key,commerceOrderId LONG,requestJson VARCHAR(75) null,responseJson VARCHAR(75) null,module VARCHAR(75) null,createDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_checkout";

	public static final String ORDER_BY_JPQL =
		" ORDER BY checkoutCustom.checkoutCustomId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_checkout.checkoutCustomId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CHECKOUTCUSTOMID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CheckoutCustomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _checkoutCustomId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCheckoutCustomId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _checkoutCustomId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CheckoutCustom.class;
	}

	@Override
	public String getModelClassName() {
		return CheckoutCustom.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CheckoutCustom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CheckoutCustom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CheckoutCustom, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CheckoutCustom)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CheckoutCustom, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CheckoutCustom, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CheckoutCustom)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CheckoutCustom, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CheckoutCustom, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CheckoutCustom, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CheckoutCustom, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CheckoutCustom, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CheckoutCustom, Object>>();
		Map<String, BiConsumer<CheckoutCustom, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CheckoutCustom, ?>>();

		attributeGetterFunctions.put(
			"checkoutCustomId", CheckoutCustom::getCheckoutCustomId);
		attributeSetterBiConsumers.put(
			"checkoutCustomId",
			(BiConsumer<CheckoutCustom, Long>)
				CheckoutCustom::setCheckoutCustomId);
		attributeGetterFunctions.put(
			"commerceOrderId", CheckoutCustom::getCommerceOrderId);
		attributeSetterBiConsumers.put(
			"commerceOrderId",
			(BiConsumer<CheckoutCustom, Long>)
				CheckoutCustom::setCommerceOrderId);
		attributeGetterFunctions.put(
			"requestJson", CheckoutCustom::getRequestJson);
		attributeSetterBiConsumers.put(
			"requestJson",
			(BiConsumer<CheckoutCustom, String>)CheckoutCustom::setRequestJson);
		attributeGetterFunctions.put(
			"responseJson", CheckoutCustom::getResponseJson);
		attributeSetterBiConsumers.put(
			"responseJson",
			(BiConsumer<CheckoutCustom, String>)
				CheckoutCustom::setResponseJson);
		attributeGetterFunctions.put("module", CheckoutCustom::getModule);
		attributeSetterBiConsumers.put(
			"module",
			(BiConsumer<CheckoutCustom, String>)CheckoutCustom::setModule);
		attributeGetterFunctions.put(
			"createDate", CheckoutCustom::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CheckoutCustom, Date>)CheckoutCustom::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCheckoutCustomId() {
		return _checkoutCustomId;
	}

	@Override
	public void setCheckoutCustomId(long checkoutCustomId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkoutCustomId = checkoutCustomId;
	}

	@Override
	public long getCommerceOrderId() {
		return _commerceOrderId;
	}

	@Override
	public void setCommerceOrderId(long commerceOrderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commerceOrderId = commerceOrderId;
	}

	@Override
	public String getRequestJson() {
		if (_requestJson == null) {
			return "";
		}
		else {
			return _requestJson;
		}
	}

	@Override
	public void setRequestJson(String requestJson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestJson = requestJson;
	}

	@Override
	public String getResponseJson() {
		if (_responseJson == null) {
			return "";
		}
		else {
			return _responseJson;
		}
	}

	@Override
	public void setResponseJson(String responseJson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responseJson = responseJson;
	}

	@Override
	public String getModule() {
		if (_module == null) {
			return "";
		}
		else {
			return _module;
		}
	}

	@Override
	public void setModule(String module) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_module = module;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CheckoutCustom.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CheckoutCustom toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CheckoutCustom>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CheckoutCustomImpl checkoutCustomImpl = new CheckoutCustomImpl();

		checkoutCustomImpl.setCheckoutCustomId(getCheckoutCustomId());
		checkoutCustomImpl.setCommerceOrderId(getCommerceOrderId());
		checkoutCustomImpl.setRequestJson(getRequestJson());
		checkoutCustomImpl.setResponseJson(getResponseJson());
		checkoutCustomImpl.setModule(getModule());
		checkoutCustomImpl.setCreateDate(getCreateDate());

		checkoutCustomImpl.resetOriginalValues();

		return checkoutCustomImpl;
	}

	@Override
	public CheckoutCustom cloneWithOriginalValues() {
		CheckoutCustomImpl checkoutCustomImpl = new CheckoutCustomImpl();

		checkoutCustomImpl.setCheckoutCustomId(
			this.<Long>getColumnOriginalValue("checkoutCustomId"));
		checkoutCustomImpl.setCommerceOrderId(
			this.<Long>getColumnOriginalValue("commerceOrderId"));
		checkoutCustomImpl.setRequestJson(
			this.<String>getColumnOriginalValue("requestJson"));
		checkoutCustomImpl.setResponseJson(
			this.<String>getColumnOriginalValue("responseJson"));
		checkoutCustomImpl.setModule(
			this.<String>getColumnOriginalValue("module"));
		checkoutCustomImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return checkoutCustomImpl;
	}

	@Override
	public int compareTo(CheckoutCustom checkoutCustom) {
		long primaryKey = checkoutCustom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CheckoutCustom)) {
			return false;
		}

		CheckoutCustom checkoutCustom = (CheckoutCustom)object;

		long primaryKey = checkoutCustom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CheckoutCustom> toCacheModel() {
		CheckoutCustomCacheModel checkoutCustomCacheModel =
			new CheckoutCustomCacheModel();

		checkoutCustomCacheModel.checkoutCustomId = getCheckoutCustomId();

		checkoutCustomCacheModel.commerceOrderId = getCommerceOrderId();

		checkoutCustomCacheModel.requestJson = getRequestJson();

		String requestJson = checkoutCustomCacheModel.requestJson;

		if ((requestJson != null) && (requestJson.length() == 0)) {
			checkoutCustomCacheModel.requestJson = null;
		}

		checkoutCustomCacheModel.responseJson = getResponseJson();

		String responseJson = checkoutCustomCacheModel.responseJson;

		if ((responseJson != null) && (responseJson.length() == 0)) {
			checkoutCustomCacheModel.responseJson = null;
		}

		checkoutCustomCacheModel.module = getModule();

		String module = checkoutCustomCacheModel.module;

		if ((module != null) && (module.length() == 0)) {
			checkoutCustomCacheModel.module = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			checkoutCustomCacheModel.createDate = createDate.getTime();
		}
		else {
			checkoutCustomCacheModel.createDate = Long.MIN_VALUE;
		}

		return checkoutCustomCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CheckoutCustom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CheckoutCustom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CheckoutCustom, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CheckoutCustom)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CheckoutCustom>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CheckoutCustom.class, ModelWrapper.class);

	}

	private long _checkoutCustomId;
	private long _commerceOrderId;
	private String _requestJson;
	private String _responseJson;
	private String _module;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		Function<CheckoutCustom, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CheckoutCustom)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("checkoutCustomId", _checkoutCustomId);
		_columnOriginalValues.put("commerceOrderId", _commerceOrderId);
		_columnOriginalValues.put("requestJson", _requestJson);
		_columnOriginalValues.put("responseJson", _responseJson);
		_columnOriginalValues.put("module", _module);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("checkoutCustomId", 1L);

		columnBitmasks.put("commerceOrderId", 2L);

		columnBitmasks.put("requestJson", 4L);

		columnBitmasks.put("responseJson", 8L);

		columnBitmasks.put("module", 16L);

		columnBitmasks.put("createDate", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CheckoutCustom _escapedModel;

}