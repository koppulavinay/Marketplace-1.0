/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.brand.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.marketplace.brand.model.Brand;
import com.marketplace.brand.model.BrandModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Brand service. Represents a row in the &quot;marketplace_brand&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BrandModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrandImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BrandImpl
 * @generated
 */
public class BrandModelImpl extends BaseModelImpl<Brand> implements BrandModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a brand model instance should use the <code>Brand</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_brand";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"brandId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"assetCategoryId", Types.BIGINT},
		{"brandCode", Types.VARCHAR}, {"brandName", Types.VARCHAR},
		{"brandDescription", Types.VARCHAR}, {"brandOwner", Types.VARCHAR},
		{"brandReviewer", Types.BIGINT}, {"brandType", Types.VARCHAR},
		{"externalReferenceId", Types.VARCHAR},
		{"brandApprovalStatus", Types.VARCHAR},
		{"reviewerRemarks", Types.VARCHAR}, {"brandInactive", Types.BOOLEAN},
		{"brandImageUpload", Types.BIGINT}, {"brandImageURL", Types.VARCHAR},
		{"managerRemarks", Types.VARCHAR}, {"customAtr1", Types.VARCHAR},
		{"customAtr2", Types.VARCHAR}, {"customAtr3", Types.VARCHAR},
		{"customAtr4", Types.VARCHAR}, {"customAtr5", Types.VARCHAR},
		{"customAtr6", Types.VARCHAR}, {"customAtr7", Types.VARCHAR},
		{"customAtr8", Types.VARCHAR}, {"customAtr9", Types.VARCHAR},
		{"customAtr10", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"ipAddress", Types.VARCHAR}, {"isActive", Types.BOOLEAN},
		{"downForSeller", Types.BOOLEAN}, {"downForBuyer", Types.BOOLEAN},
		{"downForMaintenance", Types.BOOLEAN}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assetCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brandCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandReviewer", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brandType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandApprovalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewerRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandInactive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("brandImageUpload", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brandImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr7", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr8", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr9", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customAtr10", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("downForSeller", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("downForBuyer", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("downForMaintenance", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_brand (uuid_ VARCHAR(75) null,brandId LONG not null primary key,groupId LONG,assetCategoryId LONG,brandCode VARCHAR(75) null,brandName VARCHAR(75) null,brandDescription VARCHAR(75) null,brandOwner VARCHAR(75) null,brandReviewer LONG,brandType VARCHAR(75) null,externalReferenceId VARCHAR(75) null,brandApprovalStatus VARCHAR(75) null,reviewerRemarks VARCHAR(75) null,brandInactive BOOLEAN,brandImageUpload LONG,brandImageURL VARCHAR(75) null,managerRemarks VARCHAR(75) null,customAtr1 VARCHAR(75) null,customAtr2 VARCHAR(75) null,customAtr3 VARCHAR(75) null,customAtr4 VARCHAR(75) null,customAtr5 VARCHAR(75) null,customAtr6 VARCHAR(75) null,customAtr7 VARCHAR(75) null,customAtr8 VARCHAR(75) null,customAtr9 VARCHAR(75) null,customAtr10 VARCHAR(75) null,companyId LONG,createDate DATE null,modifiedDate DATE null,createdBy LONG,modifiedBy LONG,ipAddress VARCHAR(75) null,isActive BOOLEAN,downForSeller BOOLEAN,downForBuyer BOOLEAN,downForMaintenance BOOLEAN,userId LONG,userName VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table marketplace_brand";

	public static final String ORDER_BY_JPQL =
		" ORDER BY brand.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_brand.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ASSETCATEGORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BRANDAPPROVALSTATUS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDBY_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BrandModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _brandId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBrandId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _brandId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Brand.class;
	}

	@Override
	public String getModelClassName() {
		return Brand.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Brand, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Brand, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Brand, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Brand)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Brand, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Brand, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Brand)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Brand, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Brand, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Brand, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Brand, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Brand, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Brand, Object>>();
		Map<String, BiConsumer<Brand, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Brand, ?>>();

		attributeGetterFunctions.put("uuid", Brand::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Brand, String>)Brand::setUuid);
		attributeGetterFunctions.put("brandId", Brand::getBrandId);
		attributeSetterBiConsumers.put(
			"brandId", (BiConsumer<Brand, Long>)Brand::setBrandId);
		attributeGetterFunctions.put("groupId", Brand::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Brand, Long>)Brand::setGroupId);
		attributeGetterFunctions.put(
			"assetCategoryId", Brand::getAssetCategoryId);
		attributeSetterBiConsumers.put(
			"assetCategoryId",
			(BiConsumer<Brand, Long>)Brand::setAssetCategoryId);
		attributeGetterFunctions.put("brandCode", Brand::getBrandCode);
		attributeSetterBiConsumers.put(
			"brandCode", (BiConsumer<Brand, String>)Brand::setBrandCode);
		attributeGetterFunctions.put("brandName", Brand::getBrandName);
		attributeSetterBiConsumers.put(
			"brandName", (BiConsumer<Brand, String>)Brand::setBrandName);
		attributeGetterFunctions.put(
			"brandDescription", Brand::getBrandDescription);
		attributeSetterBiConsumers.put(
			"brandDescription",
			(BiConsumer<Brand, String>)Brand::setBrandDescription);
		attributeGetterFunctions.put("brandOwner", Brand::getBrandOwner);
		attributeSetterBiConsumers.put(
			"brandOwner", (BiConsumer<Brand, String>)Brand::setBrandOwner);
		attributeGetterFunctions.put("brandReviewer", Brand::getBrandReviewer);
		attributeSetterBiConsumers.put(
			"brandReviewer", (BiConsumer<Brand, Long>)Brand::setBrandReviewer);
		attributeGetterFunctions.put("brandType", Brand::getBrandType);
		attributeSetterBiConsumers.put(
			"brandType", (BiConsumer<Brand, String>)Brand::setBrandType);
		attributeGetterFunctions.put(
			"externalReferenceId", Brand::getExternalReferenceId);
		attributeSetterBiConsumers.put(
			"externalReferenceId",
			(BiConsumer<Brand, String>)Brand::setExternalReferenceId);
		attributeGetterFunctions.put(
			"brandApprovalStatus", Brand::getBrandApprovalStatus);
		attributeSetterBiConsumers.put(
			"brandApprovalStatus",
			(BiConsumer<Brand, String>)Brand::setBrandApprovalStatus);
		attributeGetterFunctions.put(
			"reviewerRemarks", Brand::getReviewerRemarks);
		attributeSetterBiConsumers.put(
			"reviewerRemarks",
			(BiConsumer<Brand, String>)Brand::setReviewerRemarks);
		attributeGetterFunctions.put("brandInactive", Brand::getBrandInactive);
		attributeSetterBiConsumers.put(
			"brandInactive",
			(BiConsumer<Brand, Boolean>)Brand::setBrandInactive);
		attributeGetterFunctions.put(
			"brandImageUpload", Brand::getBrandImageUpload);
		attributeSetterBiConsumers.put(
			"brandImageUpload",
			(BiConsumer<Brand, Long>)Brand::setBrandImageUpload);
		attributeGetterFunctions.put("brandImageURL", Brand::getBrandImageURL);
		attributeSetterBiConsumers.put(
			"brandImageURL",
			(BiConsumer<Brand, String>)Brand::setBrandImageURL);
		attributeGetterFunctions.put(
			"managerRemarks", Brand::getManagerRemarks);
		attributeSetterBiConsumers.put(
			"managerRemarks",
			(BiConsumer<Brand, String>)Brand::setManagerRemarks);
		attributeGetterFunctions.put("customAtr1", Brand::getCustomAtr1);
		attributeSetterBiConsumers.put(
			"customAtr1", (BiConsumer<Brand, String>)Brand::setCustomAtr1);
		attributeGetterFunctions.put("customAtr2", Brand::getCustomAtr2);
		attributeSetterBiConsumers.put(
			"customAtr2", (BiConsumer<Brand, String>)Brand::setCustomAtr2);
		attributeGetterFunctions.put("customAtr3", Brand::getCustomAtr3);
		attributeSetterBiConsumers.put(
			"customAtr3", (BiConsumer<Brand, String>)Brand::setCustomAtr3);
		attributeGetterFunctions.put("customAtr4", Brand::getCustomAtr4);
		attributeSetterBiConsumers.put(
			"customAtr4", (BiConsumer<Brand, String>)Brand::setCustomAtr4);
		attributeGetterFunctions.put("customAtr5", Brand::getCustomAtr5);
		attributeSetterBiConsumers.put(
			"customAtr5", (BiConsumer<Brand, String>)Brand::setCustomAtr5);
		attributeGetterFunctions.put("customAtr6", Brand::getCustomAtr6);
		attributeSetterBiConsumers.put(
			"customAtr6", (BiConsumer<Brand, String>)Brand::setCustomAtr6);
		attributeGetterFunctions.put("customAtr7", Brand::getCustomAtr7);
		attributeSetterBiConsumers.put(
			"customAtr7", (BiConsumer<Brand, String>)Brand::setCustomAtr7);
		attributeGetterFunctions.put("customAtr8", Brand::getCustomAtr8);
		attributeSetterBiConsumers.put(
			"customAtr8", (BiConsumer<Brand, String>)Brand::setCustomAtr8);
		attributeGetterFunctions.put("customAtr9", Brand::getCustomAtr9);
		attributeSetterBiConsumers.put(
			"customAtr9", (BiConsumer<Brand, String>)Brand::setCustomAtr9);
		attributeGetterFunctions.put("customAtr10", Brand::getCustomAtr10);
		attributeSetterBiConsumers.put(
			"customAtr10", (BiConsumer<Brand, String>)Brand::setCustomAtr10);
		attributeGetterFunctions.put("companyId", Brand::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Brand, Long>)Brand::setCompanyId);
		attributeGetterFunctions.put("createDate", Brand::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Brand, Date>)Brand::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Brand::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Brand, Date>)Brand::setModifiedDate);
		attributeGetterFunctions.put("createdBy", Brand::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy", (BiConsumer<Brand, Long>)Brand::setCreatedBy);
		attributeGetterFunctions.put("modifiedBy", Brand::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy", (BiConsumer<Brand, Long>)Brand::setModifiedBy);
		attributeGetterFunctions.put("ipAddress", Brand::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress", (BiConsumer<Brand, String>)Brand::setIpAddress);
		attributeGetterFunctions.put("isActive", Brand::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive", (BiConsumer<Brand, Boolean>)Brand::setIsActive);
		attributeGetterFunctions.put("downForSeller", Brand::getDownForSeller);
		attributeSetterBiConsumers.put(
			"downForSeller",
			(BiConsumer<Brand, Boolean>)Brand::setDownForSeller);
		attributeGetterFunctions.put("downForBuyer", Brand::getDownForBuyer);
		attributeSetterBiConsumers.put(
			"downForBuyer", (BiConsumer<Brand, Boolean>)Brand::setDownForBuyer);
		attributeGetterFunctions.put(
			"downForMaintenance", Brand::getDownForMaintenance);
		attributeSetterBiConsumers.put(
			"downForMaintenance",
			(BiConsumer<Brand, Boolean>)Brand::setDownForMaintenance);
		attributeGetterFunctions.put("userId", Brand::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Brand, Long>)Brand::setUserId);
		attributeGetterFunctions.put("userName", Brand::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Brand, String>)Brand::setUserName);
		attributeGetterFunctions.put("status", Brand::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Brand, Integer>)Brand::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Brand::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Brand, Long>)Brand::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Brand::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Brand, String>)Brand::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Brand::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Brand, Date>)Brand::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getBrandId() {
		return _brandId;
	}

	@Override
	public void setBrandId(long brandId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandId = brandId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getAssetCategoryId() {
		return _assetCategoryId;
	}

	@Override
	public void setAssetCategoryId(long assetCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetCategoryId = assetCategoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAssetCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("assetCategoryId"));
	}

	@Override
	public String getBrandCode() {
		if (_brandCode == null) {
			return "";
		}
		else {
			return _brandCode;
		}
	}

	@Override
	public void setBrandCode(String brandCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandCode = brandCode;
	}

	@Override
	public String getBrandName() {
		if (_brandName == null) {
			return "";
		}
		else {
			return _brandName;
		}
	}

	@Override
	public void setBrandName(String brandName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandName = brandName;
	}

	@Override
	public String getBrandDescription() {
		if (_brandDescription == null) {
			return "";
		}
		else {
			return _brandDescription;
		}
	}

	@Override
	public void setBrandDescription(String brandDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandDescription = brandDescription;
	}

	@Override
	public String getBrandOwner() {
		if (_brandOwner == null) {
			return "";
		}
		else {
			return _brandOwner;
		}
	}

	@Override
	public void setBrandOwner(String brandOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandOwner = brandOwner;
	}

	@Override
	public long getBrandReviewer() {
		return _brandReviewer;
	}

	@Override
	public void setBrandReviewer(long brandReviewer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandReviewer = brandReviewer;
	}

	@Override
	public String getBrandType() {
		if (_brandType == null) {
			return "";
		}
		else {
			return _brandType;
		}
	}

	@Override
	public void setBrandType(String brandType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandType = brandType;
	}

	@Override
	public String getExternalReferenceId() {
		if (_externalReferenceId == null) {
			return "";
		}
		else {
			return _externalReferenceId;
		}
	}

	@Override
	public void setExternalReferenceId(String externalReferenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceId = externalReferenceId;
	}

	@Override
	public String getBrandApprovalStatus() {
		if (_brandApprovalStatus == null) {
			return "";
		}
		else {
			return _brandApprovalStatus;
		}
	}

	@Override
	public void setBrandApprovalStatus(String brandApprovalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandApprovalStatus = brandApprovalStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalBrandApprovalStatus() {
		return getColumnOriginalValue("brandApprovalStatus");
	}

	@Override
	public String getReviewerRemarks() {
		if (_reviewerRemarks == null) {
			return "";
		}
		else {
			return _reviewerRemarks;
		}
	}

	@Override
	public void setReviewerRemarks(String reviewerRemarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewerRemarks = reviewerRemarks;
	}

	@Override
	public Boolean getBrandInactive() {
		return _brandInactive;
	}

	@Override
	public void setBrandInactive(Boolean brandInactive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandInactive = brandInactive;
	}

	@Override
	public long getBrandImageUpload() {
		return _brandImageUpload;
	}

	@Override
	public void setBrandImageUpload(long brandImageUpload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandImageUpload = brandImageUpload;
	}

	@Override
	public String getBrandImageURL() {
		if (_brandImageURL == null) {
			return "";
		}
		else {
			return _brandImageURL;
		}
	}

	@Override
	public void setBrandImageURL(String brandImageURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandImageURL = brandImageURL;
	}

	@Override
	public String getManagerRemarks() {
		if (_managerRemarks == null) {
			return "";
		}
		else {
			return _managerRemarks;
		}
	}

	@Override
	public void setManagerRemarks(String managerRemarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerRemarks = managerRemarks;
	}

	@Override
	public String getCustomAtr1() {
		if (_customAtr1 == null) {
			return "";
		}
		else {
			return _customAtr1;
		}
	}

	@Override
	public void setCustomAtr1(String customAtr1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr1 = customAtr1;
	}

	@Override
	public String getCustomAtr2() {
		if (_customAtr2 == null) {
			return "";
		}
		else {
			return _customAtr2;
		}
	}

	@Override
	public void setCustomAtr2(String customAtr2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr2 = customAtr2;
	}

	@Override
	public String getCustomAtr3() {
		if (_customAtr3 == null) {
			return "";
		}
		else {
			return _customAtr3;
		}
	}

	@Override
	public void setCustomAtr3(String customAtr3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr3 = customAtr3;
	}

	@Override
	public String getCustomAtr4() {
		if (_customAtr4 == null) {
			return "";
		}
		else {
			return _customAtr4;
		}
	}

	@Override
	public void setCustomAtr4(String customAtr4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr4 = customAtr4;
	}

	@Override
	public String getCustomAtr5() {
		if (_customAtr5 == null) {
			return "";
		}
		else {
			return _customAtr5;
		}
	}

	@Override
	public void setCustomAtr5(String customAtr5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr5 = customAtr5;
	}

	@Override
	public String getCustomAtr6() {
		if (_customAtr6 == null) {
			return "";
		}
		else {
			return _customAtr6;
		}
	}

	@Override
	public void setCustomAtr6(String customAtr6) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr6 = customAtr6;
	}

	@Override
	public String getCustomAtr7() {
		if (_customAtr7 == null) {
			return "";
		}
		else {
			return _customAtr7;
		}
	}

	@Override
	public void setCustomAtr7(String customAtr7) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr7 = customAtr7;
	}

	@Override
	public String getCustomAtr8() {
		if (_customAtr8 == null) {
			return "";
		}
		else {
			return _customAtr8;
		}
	}

	@Override
	public void setCustomAtr8(String customAtr8) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr8 = customAtr8;
	}

	@Override
	public String getCustomAtr9() {
		if (_customAtr9 == null) {
			return "";
		}
		else {
			return _customAtr9;
		}
	}

	@Override
	public void setCustomAtr9(String customAtr9) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr9 = customAtr9;
	}

	@Override
	public String getCustomAtr10() {
		if (_customAtr10 == null) {
			return "";
		}
		else {
			return _customAtr10;
		}
	}

	@Override
	public void setCustomAtr10(String customAtr10) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customAtr10 = customAtr10;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreatedBy() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("createdBy"));
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@Override
	public Boolean getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(Boolean isActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isActive = isActive;
	}

	@Override
	public Boolean getDownForSeller() {
		return _downForSeller;
	}

	@Override
	public void setDownForSeller(Boolean downForSeller) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_downForSeller = downForSeller;
	}

	@Override
	public Boolean getDownForBuyer() {
		return _downForBuyer;
	}

	@Override
	public void setDownForBuyer(Boolean downForBuyer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_downForBuyer = downForBuyer;
	}

	@Override
	public Boolean getDownForMaintenance() {
		return _downForMaintenance;
	}

	@Override
	public void setDownForMaintenance(Boolean downForMaintenance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_downForMaintenance = downForMaintenance;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Brand.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Brand.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Brand toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Brand>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BrandImpl brandImpl = new BrandImpl();

		brandImpl.setUuid(getUuid());
		brandImpl.setBrandId(getBrandId());
		brandImpl.setGroupId(getGroupId());
		brandImpl.setAssetCategoryId(getAssetCategoryId());
		brandImpl.setBrandCode(getBrandCode());
		brandImpl.setBrandName(getBrandName());
		brandImpl.setBrandDescription(getBrandDescription());
		brandImpl.setBrandOwner(getBrandOwner());
		brandImpl.setBrandReviewer(getBrandReviewer());
		brandImpl.setBrandType(getBrandType());
		brandImpl.setExternalReferenceId(getExternalReferenceId());
		brandImpl.setBrandApprovalStatus(getBrandApprovalStatus());
		brandImpl.setReviewerRemarks(getReviewerRemarks());
		brandImpl.setBrandInactive(getBrandInactive());
		brandImpl.setBrandImageUpload(getBrandImageUpload());
		brandImpl.setBrandImageURL(getBrandImageURL());
		brandImpl.setManagerRemarks(getManagerRemarks());
		brandImpl.setCustomAtr1(getCustomAtr1());
		brandImpl.setCustomAtr2(getCustomAtr2());
		brandImpl.setCustomAtr3(getCustomAtr3());
		brandImpl.setCustomAtr4(getCustomAtr4());
		brandImpl.setCustomAtr5(getCustomAtr5());
		brandImpl.setCustomAtr6(getCustomAtr6());
		brandImpl.setCustomAtr7(getCustomAtr7());
		brandImpl.setCustomAtr8(getCustomAtr8());
		brandImpl.setCustomAtr9(getCustomAtr9());
		brandImpl.setCustomAtr10(getCustomAtr10());
		brandImpl.setCompanyId(getCompanyId());
		brandImpl.setCreateDate(getCreateDate());
		brandImpl.setModifiedDate(getModifiedDate());
		brandImpl.setCreatedBy(getCreatedBy());
		brandImpl.setModifiedBy(getModifiedBy());
		brandImpl.setIpAddress(getIpAddress());
		brandImpl.setIsActive(getIsActive());
		brandImpl.setDownForSeller(getDownForSeller());
		brandImpl.setDownForBuyer(getDownForBuyer());
		brandImpl.setDownForMaintenance(getDownForMaintenance());
		brandImpl.setUserId(getUserId());
		brandImpl.setUserName(getUserName());
		brandImpl.setStatus(getStatus());
		brandImpl.setStatusByUserId(getStatusByUserId());
		brandImpl.setStatusByUserName(getStatusByUserName());
		brandImpl.setStatusDate(getStatusDate());

		brandImpl.resetOriginalValues();

		return brandImpl;
	}

	@Override
	public Brand cloneWithOriginalValues() {
		BrandImpl brandImpl = new BrandImpl();

		brandImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		brandImpl.setBrandId(this.<Long>getColumnOriginalValue("brandId"));
		brandImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		brandImpl.setAssetCategoryId(
			this.<Long>getColumnOriginalValue("assetCategoryId"));
		brandImpl.setBrandCode(
			this.<String>getColumnOriginalValue("brandCode"));
		brandImpl.setBrandName(
			this.<String>getColumnOriginalValue("brandName"));
		brandImpl.setBrandDescription(
			this.<String>getColumnOriginalValue("brandDescription"));
		brandImpl.setBrandOwner(
			this.<String>getColumnOriginalValue("brandOwner"));
		brandImpl.setBrandReviewer(
			this.<Long>getColumnOriginalValue("brandReviewer"));
		brandImpl.setBrandType(
			this.<String>getColumnOriginalValue("brandType"));
		brandImpl.setExternalReferenceId(
			this.<String>getColumnOriginalValue("externalReferenceId"));
		brandImpl.setBrandApprovalStatus(
			this.<String>getColumnOriginalValue("brandApprovalStatus"));
		brandImpl.setReviewerRemarks(
			this.<String>getColumnOriginalValue("reviewerRemarks"));
		brandImpl.setBrandInactive(
			this.<Boolean>getColumnOriginalValue("brandInactive"));
		brandImpl.setBrandImageUpload(
			this.<Long>getColumnOriginalValue("brandImageUpload"));
		brandImpl.setBrandImageURL(
			this.<String>getColumnOriginalValue("brandImageURL"));
		brandImpl.setManagerRemarks(
			this.<String>getColumnOriginalValue("managerRemarks"));
		brandImpl.setCustomAtr1(
			this.<String>getColumnOriginalValue("customAtr1"));
		brandImpl.setCustomAtr2(
			this.<String>getColumnOriginalValue("customAtr2"));
		brandImpl.setCustomAtr3(
			this.<String>getColumnOriginalValue("customAtr3"));
		brandImpl.setCustomAtr4(
			this.<String>getColumnOriginalValue("customAtr4"));
		brandImpl.setCustomAtr5(
			this.<String>getColumnOriginalValue("customAtr5"));
		brandImpl.setCustomAtr6(
			this.<String>getColumnOriginalValue("customAtr6"));
		brandImpl.setCustomAtr7(
			this.<String>getColumnOriginalValue("customAtr7"));
		brandImpl.setCustomAtr8(
			this.<String>getColumnOriginalValue("customAtr8"));
		brandImpl.setCustomAtr9(
			this.<String>getColumnOriginalValue("customAtr9"));
		brandImpl.setCustomAtr10(
			this.<String>getColumnOriginalValue("customAtr10"));
		brandImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		brandImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		brandImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		brandImpl.setCreatedBy(this.<Long>getColumnOriginalValue("createdBy"));
		brandImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		brandImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));
		brandImpl.setIsActive(this.<Boolean>getColumnOriginalValue("isActive"));
		brandImpl.setDownForSeller(
			this.<Boolean>getColumnOriginalValue("downForSeller"));
		brandImpl.setDownForBuyer(
			this.<Boolean>getColumnOriginalValue("downForBuyer"));
		brandImpl.setDownForMaintenance(
			this.<Boolean>getColumnOriginalValue("downForMaintenance"));
		brandImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		brandImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		brandImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		brandImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		brandImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		brandImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return brandImpl;
	}

	@Override
	public int compareTo(Brand brand) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), brand.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Brand)) {
			return false;
		}

		Brand brand = (Brand)object;

		long primaryKey = brand.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Brand> toCacheModel() {
		BrandCacheModel brandCacheModel = new BrandCacheModel();

		brandCacheModel.uuid = getUuid();

		String uuid = brandCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			brandCacheModel.uuid = null;
		}

		brandCacheModel.brandId = getBrandId();

		brandCacheModel.groupId = getGroupId();

		brandCacheModel.assetCategoryId = getAssetCategoryId();

		brandCacheModel.brandCode = getBrandCode();

		String brandCode = brandCacheModel.brandCode;

		if ((brandCode != null) && (brandCode.length() == 0)) {
			brandCacheModel.brandCode = null;
		}

		brandCacheModel.brandName = getBrandName();

		String brandName = brandCacheModel.brandName;

		if ((brandName != null) && (brandName.length() == 0)) {
			brandCacheModel.brandName = null;
		}

		brandCacheModel.brandDescription = getBrandDescription();

		String brandDescription = brandCacheModel.brandDescription;

		if ((brandDescription != null) && (brandDescription.length() == 0)) {
			brandCacheModel.brandDescription = null;
		}

		brandCacheModel.brandOwner = getBrandOwner();

		String brandOwner = brandCacheModel.brandOwner;

		if ((brandOwner != null) && (brandOwner.length() == 0)) {
			brandCacheModel.brandOwner = null;
		}

		brandCacheModel.brandReviewer = getBrandReviewer();

		brandCacheModel.brandType = getBrandType();

		String brandType = brandCacheModel.brandType;

		if ((brandType != null) && (brandType.length() == 0)) {
			brandCacheModel.brandType = null;
		}

		brandCacheModel.externalReferenceId = getExternalReferenceId();

		String externalReferenceId = brandCacheModel.externalReferenceId;

		if ((externalReferenceId != null) &&
			(externalReferenceId.length() == 0)) {

			brandCacheModel.externalReferenceId = null;
		}

		brandCacheModel.brandApprovalStatus = getBrandApprovalStatus();

		String brandApprovalStatus = brandCacheModel.brandApprovalStatus;

		if ((brandApprovalStatus != null) &&
			(brandApprovalStatus.length() == 0)) {

			brandCacheModel.brandApprovalStatus = null;
		}

		brandCacheModel.reviewerRemarks = getReviewerRemarks();

		String reviewerRemarks = brandCacheModel.reviewerRemarks;

		if ((reviewerRemarks != null) && (reviewerRemarks.length() == 0)) {
			brandCacheModel.reviewerRemarks = null;
		}

		Boolean brandInactive = getBrandInactive();

		if (brandInactive != null) {
			brandCacheModel.brandInactive = brandInactive;
		}

		brandCacheModel.brandImageUpload = getBrandImageUpload();

		brandCacheModel.brandImageURL = getBrandImageURL();

		String brandImageURL = brandCacheModel.brandImageURL;

		if ((brandImageURL != null) && (brandImageURL.length() == 0)) {
			brandCacheModel.brandImageURL = null;
		}

		brandCacheModel.managerRemarks = getManagerRemarks();

		String managerRemarks = brandCacheModel.managerRemarks;

		if ((managerRemarks != null) && (managerRemarks.length() == 0)) {
			brandCacheModel.managerRemarks = null;
		}

		brandCacheModel.customAtr1 = getCustomAtr1();

		String customAtr1 = brandCacheModel.customAtr1;

		if ((customAtr1 != null) && (customAtr1.length() == 0)) {
			brandCacheModel.customAtr1 = null;
		}

		brandCacheModel.customAtr2 = getCustomAtr2();

		String customAtr2 = brandCacheModel.customAtr2;

		if ((customAtr2 != null) && (customAtr2.length() == 0)) {
			brandCacheModel.customAtr2 = null;
		}

		brandCacheModel.customAtr3 = getCustomAtr3();

		String customAtr3 = brandCacheModel.customAtr3;

		if ((customAtr3 != null) && (customAtr3.length() == 0)) {
			brandCacheModel.customAtr3 = null;
		}

		brandCacheModel.customAtr4 = getCustomAtr4();

		String customAtr4 = brandCacheModel.customAtr4;

		if ((customAtr4 != null) && (customAtr4.length() == 0)) {
			brandCacheModel.customAtr4 = null;
		}

		brandCacheModel.customAtr5 = getCustomAtr5();

		String customAtr5 = brandCacheModel.customAtr5;

		if ((customAtr5 != null) && (customAtr5.length() == 0)) {
			brandCacheModel.customAtr5 = null;
		}

		brandCacheModel.customAtr6 = getCustomAtr6();

		String customAtr6 = brandCacheModel.customAtr6;

		if ((customAtr6 != null) && (customAtr6.length() == 0)) {
			brandCacheModel.customAtr6 = null;
		}

		brandCacheModel.customAtr7 = getCustomAtr7();

		String customAtr7 = brandCacheModel.customAtr7;

		if ((customAtr7 != null) && (customAtr7.length() == 0)) {
			brandCacheModel.customAtr7 = null;
		}

		brandCacheModel.customAtr8 = getCustomAtr8();

		String customAtr8 = brandCacheModel.customAtr8;

		if ((customAtr8 != null) && (customAtr8.length() == 0)) {
			brandCacheModel.customAtr8 = null;
		}

		brandCacheModel.customAtr9 = getCustomAtr9();

		String customAtr9 = brandCacheModel.customAtr9;

		if ((customAtr9 != null) && (customAtr9.length() == 0)) {
			brandCacheModel.customAtr9 = null;
		}

		brandCacheModel.customAtr10 = getCustomAtr10();

		String customAtr10 = brandCacheModel.customAtr10;

		if ((customAtr10 != null) && (customAtr10.length() == 0)) {
			brandCacheModel.customAtr10 = null;
		}

		brandCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			brandCacheModel.createDate = createDate.getTime();
		}
		else {
			brandCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			brandCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			brandCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		brandCacheModel.createdBy = getCreatedBy();

		brandCacheModel.modifiedBy = getModifiedBy();

		brandCacheModel.ipAddress = getIpAddress();

		String ipAddress = brandCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			brandCacheModel.ipAddress = null;
		}

		Boolean isActive = getIsActive();

		if (isActive != null) {
			brandCacheModel.isActive = isActive;
		}

		Boolean downForSeller = getDownForSeller();

		if (downForSeller != null) {
			brandCacheModel.downForSeller = downForSeller;
		}

		Boolean downForBuyer = getDownForBuyer();

		if (downForBuyer != null) {
			brandCacheModel.downForBuyer = downForBuyer;
		}

		Boolean downForMaintenance = getDownForMaintenance();

		if (downForMaintenance != null) {
			brandCacheModel.downForMaintenance = downForMaintenance;
		}

		brandCacheModel.userId = getUserId();

		brandCacheModel.userName = getUserName();

		String userName = brandCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			brandCacheModel.userName = null;
		}

		brandCacheModel.status = getStatus();

		brandCacheModel.statusByUserId = getStatusByUserId();

		brandCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = brandCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			brandCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			brandCacheModel.statusDate = statusDate.getTime();
		}
		else {
			brandCacheModel.statusDate = Long.MIN_VALUE;
		}

		return brandCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Brand, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Brand, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Brand, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Brand)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Brand>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Brand.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _brandId;
	private long _groupId;
	private long _assetCategoryId;
	private String _brandCode;
	private String _brandName;
	private String _brandDescription;
	private String _brandOwner;
	private long _brandReviewer;
	private String _brandType;
	private String _externalReferenceId;
	private String _brandApprovalStatus;
	private String _reviewerRemarks;
	private Boolean _brandInactive;
	private long _brandImageUpload;
	private String _brandImageURL;
	private String _managerRemarks;
	private String _customAtr1;
	private String _customAtr2;
	private String _customAtr3;
	private String _customAtr4;
	private String _customAtr5;
	private String _customAtr6;
	private String _customAtr7;
	private String _customAtr8;
	private String _customAtr9;
	private String _customAtr10;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;
	private String _ipAddress;
	private Boolean _isActive;
	private Boolean _downForSeller;
	private Boolean _downForBuyer;
	private Boolean _downForMaintenance;
	private long _userId;
	private String _userName;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Brand, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Brand)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("brandId", _brandId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("assetCategoryId", _assetCategoryId);
		_columnOriginalValues.put("brandCode", _brandCode);
		_columnOriginalValues.put("brandName", _brandName);
		_columnOriginalValues.put("brandDescription", _brandDescription);
		_columnOriginalValues.put("brandOwner", _brandOwner);
		_columnOriginalValues.put("brandReviewer", _brandReviewer);
		_columnOriginalValues.put("brandType", _brandType);
		_columnOriginalValues.put("externalReferenceId", _externalReferenceId);
		_columnOriginalValues.put("brandApprovalStatus", _brandApprovalStatus);
		_columnOriginalValues.put("reviewerRemarks", _reviewerRemarks);
		_columnOriginalValues.put("brandInactive", _brandInactive);
		_columnOriginalValues.put("brandImageUpload", _brandImageUpload);
		_columnOriginalValues.put("brandImageURL", _brandImageURL);
		_columnOriginalValues.put("managerRemarks", _managerRemarks);
		_columnOriginalValues.put("customAtr1", _customAtr1);
		_columnOriginalValues.put("customAtr2", _customAtr2);
		_columnOriginalValues.put("customAtr3", _customAtr3);
		_columnOriginalValues.put("customAtr4", _customAtr4);
		_columnOriginalValues.put("customAtr5", _customAtr5);
		_columnOriginalValues.put("customAtr6", _customAtr6);
		_columnOriginalValues.put("customAtr7", _customAtr7);
		_columnOriginalValues.put("customAtr8", _customAtr8);
		_columnOriginalValues.put("customAtr9", _customAtr9);
		_columnOriginalValues.put("customAtr10", _customAtr10);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("ipAddress", _ipAddress);
		_columnOriginalValues.put("isActive", _isActive);
		_columnOriginalValues.put("downForSeller", _downForSeller);
		_columnOriginalValues.put("downForBuyer", _downForBuyer);
		_columnOriginalValues.put("downForMaintenance", _downForMaintenance);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("brandId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("assetCategoryId", 8L);

		columnBitmasks.put("brandCode", 16L);

		columnBitmasks.put("brandName", 32L);

		columnBitmasks.put("brandDescription", 64L);

		columnBitmasks.put("brandOwner", 128L);

		columnBitmasks.put("brandReviewer", 256L);

		columnBitmasks.put("brandType", 512L);

		columnBitmasks.put("externalReferenceId", 1024L);

		columnBitmasks.put("brandApprovalStatus", 2048L);

		columnBitmasks.put("reviewerRemarks", 4096L);

		columnBitmasks.put("brandInactive", 8192L);

		columnBitmasks.put("brandImageUpload", 16384L);

		columnBitmasks.put("brandImageURL", 32768L);

		columnBitmasks.put("managerRemarks", 65536L);

		columnBitmasks.put("customAtr1", 131072L);

		columnBitmasks.put("customAtr2", 262144L);

		columnBitmasks.put("customAtr3", 524288L);

		columnBitmasks.put("customAtr4", 1048576L);

		columnBitmasks.put("customAtr5", 2097152L);

		columnBitmasks.put("customAtr6", 4194304L);

		columnBitmasks.put("customAtr7", 8388608L);

		columnBitmasks.put("customAtr8", 16777216L);

		columnBitmasks.put("customAtr9", 33554432L);

		columnBitmasks.put("customAtr10", 67108864L);

		columnBitmasks.put("companyId", 134217728L);

		columnBitmasks.put("createDate", 268435456L);

		columnBitmasks.put("modifiedDate", 536870912L);

		columnBitmasks.put("createdBy", 1073741824L);

		columnBitmasks.put("modifiedBy", 2147483648L);

		columnBitmasks.put("ipAddress", 4294967296L);

		columnBitmasks.put("isActive", 8589934592L);

		columnBitmasks.put("downForSeller", 17179869184L);

		columnBitmasks.put("downForBuyer", 34359738368L);

		columnBitmasks.put("downForMaintenance", 68719476736L);

		columnBitmasks.put("userId", 137438953472L);

		columnBitmasks.put("userName", 274877906944L);

		columnBitmasks.put("status", 549755813888L);

		columnBitmasks.put("statusByUserId", 1099511627776L);

		columnBitmasks.put("statusByUserName", 2199023255552L);

		columnBitmasks.put("statusDate", 4398046511104L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Brand _escapedModel;

}