/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.brand.document.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.marketplace.brand.document.master.model.BrandDocumentUpload;
import com.marketplace.brand.document.master.model.BrandDocumentUploadModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BrandDocumentUpload service. Represents a row in the &quot;marketplace_branddocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BrandDocumentUploadModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrandDocumentUploadImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BrandDocumentUploadImpl
 * @generated
 */
public class BrandDocumentUploadModelImpl
	extends BaseModelImpl<BrandDocumentUpload>
	implements BrandDocumentUploadModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a brand document upload model instance should use the <code>BrandDocumentUpload</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_branddocument";

	public static final Object[][] TABLE_COLUMNS = {
		{"brandDocumentUploadId", Types.BIGINT}, {"brandId", Types.BIGINT},
		{"documentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("brandDocumentUploadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brandId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_branddocument (brandDocumentUploadId LONG not null primary key,brandId LONG,documentId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_branddocument";

	public static final String ORDER_BY_JPQL =
		" ORDER BY brandDocumentUpload.brandDocumentUploadId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_branddocument.brandDocumentUploadId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BRANDID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCUMENTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BRANDDOCUMENTUPLOADID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BrandDocumentUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _brandDocumentUploadId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBrandDocumentUploadId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _brandDocumentUploadId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BrandDocumentUpload.class;
	}

	@Override
	public String getModelClassName() {
		return BrandDocumentUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BrandDocumentUpload, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BrandDocumentUpload, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrandDocumentUpload, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BrandDocumentUpload)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BrandDocumentUpload, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BrandDocumentUpload, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BrandDocumentUpload)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BrandDocumentUpload, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BrandDocumentUpload, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BrandDocumentUpload, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BrandDocumentUpload, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BrandDocumentUpload, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<BrandDocumentUpload, Object>>();
		Map<String, BiConsumer<BrandDocumentUpload, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BrandDocumentUpload, ?>>();

		attributeGetterFunctions.put(
			"brandDocumentUploadId",
			BrandDocumentUpload::getBrandDocumentUploadId);
		attributeSetterBiConsumers.put(
			"brandDocumentUploadId",
			(BiConsumer<BrandDocumentUpload, Long>)
				BrandDocumentUpload::setBrandDocumentUploadId);
		attributeGetterFunctions.put(
			"brandId", BrandDocumentUpload::getBrandId);
		attributeSetterBiConsumers.put(
			"brandId",
			(BiConsumer<BrandDocumentUpload, Long>)
				BrandDocumentUpload::setBrandId);
		attributeGetterFunctions.put(
			"documentId", BrandDocumentUpload::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId",
			(BiConsumer<BrandDocumentUpload, Long>)
				BrandDocumentUpload::setDocumentId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getBrandDocumentUploadId() {
		return _brandDocumentUploadId;
	}

	@Override
	public void setBrandDocumentUploadId(long brandDocumentUploadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandDocumentUploadId = brandDocumentUploadId;
	}

	@Override
	public long getBrandId() {
		return _brandId;
	}

	@Override
	public void setBrandId(long brandId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandId = brandId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBrandId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("brandId"));
	}

	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentId = documentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDocumentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("documentId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BrandDocumentUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BrandDocumentUpload toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BrandDocumentUpload>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BrandDocumentUploadImpl brandDocumentUploadImpl =
			new BrandDocumentUploadImpl();

		brandDocumentUploadImpl.setBrandDocumentUploadId(
			getBrandDocumentUploadId());
		brandDocumentUploadImpl.setBrandId(getBrandId());
		brandDocumentUploadImpl.setDocumentId(getDocumentId());

		brandDocumentUploadImpl.resetOriginalValues();

		return brandDocumentUploadImpl;
	}

	@Override
	public BrandDocumentUpload cloneWithOriginalValues() {
		BrandDocumentUploadImpl brandDocumentUploadImpl =
			new BrandDocumentUploadImpl();

		brandDocumentUploadImpl.setBrandDocumentUploadId(
			this.<Long>getColumnOriginalValue("brandDocumentUploadId"));
		brandDocumentUploadImpl.setBrandId(
			this.<Long>getColumnOriginalValue("brandId"));
		brandDocumentUploadImpl.setDocumentId(
			this.<Long>getColumnOriginalValue("documentId"));

		return brandDocumentUploadImpl;
	}

	@Override
	public int compareTo(BrandDocumentUpload brandDocumentUpload) {
		long primaryKey = brandDocumentUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BrandDocumentUpload)) {
			return false;
		}

		BrandDocumentUpload brandDocumentUpload = (BrandDocumentUpload)object;

		long primaryKey = brandDocumentUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BrandDocumentUpload> toCacheModel() {
		BrandDocumentUploadCacheModel brandDocumentUploadCacheModel =
			new BrandDocumentUploadCacheModel();

		brandDocumentUploadCacheModel.brandDocumentUploadId =
			getBrandDocumentUploadId();

		brandDocumentUploadCacheModel.brandId = getBrandId();

		brandDocumentUploadCacheModel.documentId = getDocumentId();

		return brandDocumentUploadCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BrandDocumentUpload, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BrandDocumentUpload, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrandDocumentUpload, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(BrandDocumentUpload)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BrandDocumentUpload>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BrandDocumentUpload.class, ModelWrapper.class);

	}

	private long _brandDocumentUploadId;
	private long _brandId;
	private long _documentId;

	public <T> T getColumnValue(String columnName) {
		Function<BrandDocumentUpload, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BrandDocumentUpload)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"brandDocumentUploadId", _brandDocumentUploadId);
		_columnOriginalValues.put("brandId", _brandId);
		_columnOriginalValues.put("documentId", _documentId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("brandDocumentUploadId", 1L);

		columnBitmasks.put("brandId", 2L);

		columnBitmasks.put("documentId", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BrandDocumentUpload _escapedModel;

}