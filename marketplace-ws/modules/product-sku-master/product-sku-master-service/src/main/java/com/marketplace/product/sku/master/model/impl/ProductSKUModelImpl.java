/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.product.sku.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.marketplace.product.sku.master.model.ProductSKU;
import com.marketplace.product.sku.master.model.ProductSKUModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductSKU service. Represents a row in the &quot;marketplace_product_sku&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductSKUModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductSKUImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductSKUImpl
 * @generated
 */
public class ProductSKUModelImpl
	extends BaseModelImpl<ProductSKU> implements ProductSKUModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product sku model instance should use the <code>ProductSKU</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_product_sku";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"productSKUId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"draftProductId", Types.BIGINT},
		{"skuId", Types.VARCHAR}, {"sellerSkuId", Types.VARCHAR},
		{"skuName", Types.VARCHAR}, {"skuCreationName", Types.VARCHAR},
		{"defaultSku", Types.VARCHAR}, {"basePrice", Types.DECIMAL},
		{"offerPrice", Types.DECIMAL}, {"cost", Types.DECIMAL},
		{"margin", Types.DECIMAL}, {"stock", Types.BIGINT},
		{"uom", Types.VARCHAR}, {"minimumOrderQuantity", Types.BIGINT},
		{"maximumOrderQuantity", Types.BIGINT},
		{"lowStockThreshold", Types.BIGINT}, {"tax", Types.VARCHAR},
		{"skuPublishingDate", Types.TIMESTAMP},
		{"skuExpiryDate", Types.TIMESTAMP}, {"images", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"createdBy", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP},
		{"modifiedBy", Types.BIGINT}, {"ipAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productSKUId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("draftProductId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("skuId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sellerSkuId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skuName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skuCreationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultSku", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("basePrice", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("offerPrice", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("cost", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("margin", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("stock", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minimumOrderQuantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maximumOrderQuantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lowStockThreshold", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skuPublishingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("skuExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("images", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_product_sku (uuid_ VARCHAR(75) null,productSKUId LONG not null primary key,groupId LONG,draftProductId LONG,skuId VARCHAR(75) null,sellerSkuId VARCHAR(75) null,skuName VARCHAR(75) null,skuCreationName STRING null,defaultSku VARCHAR(75) null,basePrice DECIMAL(30, 16) null,offerPrice DECIMAL(30, 16) null,cost DECIMAL(30, 16) null,margin DECIMAL(30, 16) null,stock LONG,uom VARCHAR(75) null,minimumOrderQuantity LONG,maximumOrderQuantity LONG,lowStockThreshold LONG,tax VARCHAR(75) null,skuPublishingDate DATE null,skuExpiryDate DATE null,images VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG,ipAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_product_sku";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productSKU.productSKUId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_product_sku.productSKUId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEFAULTSKU_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DRAFTPRODUCTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SKUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SKUNAME_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRODUCTSKUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProductSKUModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productSKUId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductSKUId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productSKUId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductSKU.class;
	}

	@Override
	public String getModelClassName() {
		return ProductSKU.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductSKU, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductSKU, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductSKU, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ProductSKU)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductSKU, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductSKU, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductSKU)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductSKU, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductSKU, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ProductSKU, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductSKU, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductSKU, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProductSKU, Object>>();
		Map<String, BiConsumer<ProductSKU, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProductSKU, ?>>();

		attributeGetterFunctions.put("uuid", ProductSKU::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ProductSKU, String>)ProductSKU::setUuid);
		attributeGetterFunctions.put(
			"productSKUId", ProductSKU::getProductSKUId);
		attributeSetterBiConsumers.put(
			"productSKUId",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setProductSKUId);
		attributeGetterFunctions.put("groupId", ProductSKU::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ProductSKU, Long>)ProductSKU::setGroupId);
		attributeGetterFunctions.put(
			"draftProductId", ProductSKU::getDraftProductId);
		attributeSetterBiConsumers.put(
			"draftProductId",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setDraftProductId);
		attributeGetterFunctions.put("skuId", ProductSKU::getSkuId);
		attributeSetterBiConsumers.put(
			"skuId", (BiConsumer<ProductSKU, String>)ProductSKU::setSkuId);
		attributeGetterFunctions.put("sellerSkuId", ProductSKU::getSellerSkuId);
		attributeSetterBiConsumers.put(
			"sellerSkuId",
			(BiConsumer<ProductSKU, String>)ProductSKU::setSellerSkuId);
		attributeGetterFunctions.put("skuName", ProductSKU::getSkuName);
		attributeSetterBiConsumers.put(
			"skuName", (BiConsumer<ProductSKU, String>)ProductSKU::setSkuName);
		attributeGetterFunctions.put(
			"skuCreationName", ProductSKU::getSkuCreationName);
		attributeSetterBiConsumers.put(
			"skuCreationName",
			(BiConsumer<ProductSKU, String>)ProductSKU::setSkuCreationName);
		attributeGetterFunctions.put("defaultSku", ProductSKU::getDefaultSku);
		attributeSetterBiConsumers.put(
			"defaultSku",
			(BiConsumer<ProductSKU, String>)ProductSKU::setDefaultSku);
		attributeGetterFunctions.put("basePrice", ProductSKU::getBasePrice);
		attributeSetterBiConsumers.put(
			"basePrice",
			(BiConsumer<ProductSKU, BigDecimal>)ProductSKU::setBasePrice);
		attributeGetterFunctions.put("offerPrice", ProductSKU::getOfferPrice);
		attributeSetterBiConsumers.put(
			"offerPrice",
			(BiConsumer<ProductSKU, BigDecimal>)ProductSKU::setOfferPrice);
		attributeGetterFunctions.put("cost", ProductSKU::getCost);
		attributeSetterBiConsumers.put(
			"cost", (BiConsumer<ProductSKU, BigDecimal>)ProductSKU::setCost);
		attributeGetterFunctions.put("margin", ProductSKU::getMargin);
		attributeSetterBiConsumers.put(
			"margin",
			(BiConsumer<ProductSKU, BigDecimal>)ProductSKU::setMargin);
		attributeGetterFunctions.put("stock", ProductSKU::getStock);
		attributeSetterBiConsumers.put(
			"stock", (BiConsumer<ProductSKU, Long>)ProductSKU::setStock);
		attributeGetterFunctions.put("uom", ProductSKU::getUom);
		attributeSetterBiConsumers.put(
			"uom", (BiConsumer<ProductSKU, String>)ProductSKU::setUom);
		attributeGetterFunctions.put(
			"minimumOrderQuantity", ProductSKU::getMinimumOrderQuantity);
		attributeSetterBiConsumers.put(
			"minimumOrderQuantity",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setMinimumOrderQuantity);
		attributeGetterFunctions.put(
			"maximumOrderQuantity", ProductSKU::getMaximumOrderQuantity);
		attributeSetterBiConsumers.put(
			"maximumOrderQuantity",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setMaximumOrderQuantity);
		attributeGetterFunctions.put(
			"lowStockThreshold", ProductSKU::getLowStockThreshold);
		attributeSetterBiConsumers.put(
			"lowStockThreshold",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setLowStockThreshold);
		attributeGetterFunctions.put("tax", ProductSKU::getTax);
		attributeSetterBiConsumers.put(
			"tax", (BiConsumer<ProductSKU, String>)ProductSKU::setTax);
		attributeGetterFunctions.put(
			"skuPublishingDate", ProductSKU::getSkuPublishingDate);
		attributeSetterBiConsumers.put(
			"skuPublishingDate",
			(BiConsumer<ProductSKU, Date>)ProductSKU::setSkuPublishingDate);
		attributeGetterFunctions.put(
			"skuExpiryDate", ProductSKU::getSkuExpiryDate);
		attributeSetterBiConsumers.put(
			"skuExpiryDate",
			(BiConsumer<ProductSKU, Date>)ProductSKU::setSkuExpiryDate);
		attributeGetterFunctions.put("images", ProductSKU::getImages);
		attributeSetterBiConsumers.put(
			"images", (BiConsumer<ProductSKU, String>)ProductSKU::setImages);
		attributeGetterFunctions.put("companyId", ProductSKU::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setCompanyId);
		attributeGetterFunctions.put("userId", ProductSKU::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<ProductSKU, Long>)ProductSKU::setUserId);
		attributeGetterFunctions.put("userName", ProductSKU::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ProductSKU, String>)ProductSKU::setUserName);
		attributeGetterFunctions.put("createDate", ProductSKU::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ProductSKU, Date>)ProductSKU::setCreateDate);
		attributeGetterFunctions.put("createdBy", ProductSKU::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", ProductSKU::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ProductSKU, Date>)ProductSKU::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", ProductSKU::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<ProductSKU, Long>)ProductSKU::setModifiedBy);
		attributeGetterFunctions.put("ipAddress", ProductSKU::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress",
			(BiConsumer<ProductSKU, String>)ProductSKU::setIpAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getProductSKUId() {
		return _productSKUId;
	}

	@Override
	public void setProductSKUId(long productSKUId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productSKUId = productSKUId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getDraftProductId() {
		return _draftProductId;
	}

	@Override
	public void setDraftProductId(long draftProductId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_draftProductId = draftProductId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDraftProductId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("draftProductId"));
	}

	@Override
	public String getSkuId() {
		if (_skuId == null) {
			return "";
		}
		else {
			return _skuId;
		}
	}

	@Override
	public void setSkuId(String skuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuId = skuId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSkuId() {
		return getColumnOriginalValue("skuId");
	}

	@Override
	public String getSellerSkuId() {
		if (_sellerSkuId == null) {
			return "";
		}
		else {
			return _sellerSkuId;
		}
	}

	@Override
	public void setSellerSkuId(String sellerSkuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sellerSkuId = sellerSkuId;
	}

	@Override
	public String getSkuName() {
		if (_skuName == null) {
			return "";
		}
		else {
			return _skuName;
		}
	}

	@Override
	public void setSkuName(String skuName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuName = skuName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSkuName() {
		return getColumnOriginalValue("skuName");
	}

	@Override
	public String getSkuCreationName() {
		if (_skuCreationName == null) {
			return "";
		}
		else {
			return _skuCreationName;
		}
	}

	@Override
	public void setSkuCreationName(String skuCreationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuCreationName = skuCreationName;
	}

	@Override
	public String getDefaultSku() {
		if (_defaultSku == null) {
			return "";
		}
		else {
			return _defaultSku;
		}
	}

	@Override
	public void setDefaultSku(String defaultSku) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultSku = defaultSku;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDefaultSku() {
		return getColumnOriginalValue("defaultSku");
	}

	@Override
	public BigDecimal getBasePrice() {
		return _basePrice;
	}

	@Override
	public void setBasePrice(BigDecimal basePrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_basePrice = basePrice;
	}

	@Override
	public BigDecimal getOfferPrice() {
		return _offerPrice;
	}

	@Override
	public void setOfferPrice(BigDecimal offerPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_offerPrice = offerPrice;
	}

	@Override
	public BigDecimal getCost() {
		return _cost;
	}

	@Override
	public void setCost(BigDecimal cost) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cost = cost;
	}

	@Override
	public BigDecimal getMargin() {
		return _margin;
	}

	@Override
	public void setMargin(BigDecimal margin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_margin = margin;
	}

	@Override
	public long getStock() {
		return _stock;
	}

	@Override
	public void setStock(long stock) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stock = stock;
	}

	@Override
	public String getUom() {
		if (_uom == null) {
			return "";
		}
		else {
			return _uom;
		}
	}

	@Override
	public void setUom(String uom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uom = uom;
	}

	@Override
	public long getMinimumOrderQuantity() {
		return _minimumOrderQuantity;
	}

	@Override
	public void setMinimumOrderQuantity(long minimumOrderQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minimumOrderQuantity = minimumOrderQuantity;
	}

	@Override
	public long getMaximumOrderQuantity() {
		return _maximumOrderQuantity;
	}

	@Override
	public void setMaximumOrderQuantity(long maximumOrderQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maximumOrderQuantity = maximumOrderQuantity;
	}

	@Override
	public long getLowStockThreshold() {
		return _lowStockThreshold;
	}

	@Override
	public void setLowStockThreshold(long lowStockThreshold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lowStockThreshold = lowStockThreshold;
	}

	@Override
	public String getTax() {
		if (_tax == null) {
			return "";
		}
		else {
			return _tax;
		}
	}

	@Override
	public void setTax(String tax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tax = tax;
	}

	@Override
	public Date getSkuPublishingDate() {
		return _skuPublishingDate;
	}

	@Override
	public void setSkuPublishingDate(Date skuPublishingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuPublishingDate = skuPublishingDate;
	}

	@Override
	public Date getSkuExpiryDate() {
		return _skuExpiryDate;
	}

	@Override
	public void setSkuExpiryDate(Date skuExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuExpiryDate = skuExpiryDate;
	}

	@Override
	public String getImages() {
		if (_images == null) {
			return "";
		}
		else {
			return _images;
		}
	}

	@Override
	public void setImages(String images) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_images = images;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ProductSKU.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ProductSKU.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductSKU toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductSKU>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductSKUImpl productSKUImpl = new ProductSKUImpl();

		productSKUImpl.setUuid(getUuid());
		productSKUImpl.setProductSKUId(getProductSKUId());
		productSKUImpl.setGroupId(getGroupId());
		productSKUImpl.setDraftProductId(getDraftProductId());
		productSKUImpl.setSkuId(getSkuId());
		productSKUImpl.setSellerSkuId(getSellerSkuId());
		productSKUImpl.setSkuName(getSkuName());
		productSKUImpl.setSkuCreationName(getSkuCreationName());
		productSKUImpl.setDefaultSku(getDefaultSku());
		productSKUImpl.setBasePrice(getBasePrice());
		productSKUImpl.setOfferPrice(getOfferPrice());
		productSKUImpl.setCost(getCost());
		productSKUImpl.setMargin(getMargin());
		productSKUImpl.setStock(getStock());
		productSKUImpl.setUom(getUom());
		productSKUImpl.setMinimumOrderQuantity(getMinimumOrderQuantity());
		productSKUImpl.setMaximumOrderQuantity(getMaximumOrderQuantity());
		productSKUImpl.setLowStockThreshold(getLowStockThreshold());
		productSKUImpl.setTax(getTax());
		productSKUImpl.setSkuPublishingDate(getSkuPublishingDate());
		productSKUImpl.setSkuExpiryDate(getSkuExpiryDate());
		productSKUImpl.setImages(getImages());
		productSKUImpl.setCompanyId(getCompanyId());
		productSKUImpl.setUserId(getUserId());
		productSKUImpl.setUserName(getUserName());
		productSKUImpl.setCreateDate(getCreateDate());
		productSKUImpl.setCreatedBy(getCreatedBy());
		productSKUImpl.setModifiedDate(getModifiedDate());
		productSKUImpl.setModifiedBy(getModifiedBy());
		productSKUImpl.setIpAddress(getIpAddress());

		productSKUImpl.resetOriginalValues();

		return productSKUImpl;
	}

	@Override
	public ProductSKU cloneWithOriginalValues() {
		ProductSKUImpl productSKUImpl = new ProductSKUImpl();

		productSKUImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		productSKUImpl.setProductSKUId(
			this.<Long>getColumnOriginalValue("productSKUId"));
		productSKUImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		productSKUImpl.setDraftProductId(
			this.<Long>getColumnOriginalValue("draftProductId"));
		productSKUImpl.setSkuId(this.<String>getColumnOriginalValue("skuId"));
		productSKUImpl.setSellerSkuId(
			this.<String>getColumnOriginalValue("sellerSkuId"));
		productSKUImpl.setSkuName(
			this.<String>getColumnOriginalValue("skuName"));
		productSKUImpl.setSkuCreationName(
			this.<String>getColumnOriginalValue("skuCreationName"));
		productSKUImpl.setDefaultSku(
			this.<String>getColumnOriginalValue("defaultSku"));
		productSKUImpl.setBasePrice(
			this.<BigDecimal>getColumnOriginalValue("basePrice"));
		productSKUImpl.setOfferPrice(
			this.<BigDecimal>getColumnOriginalValue("offerPrice"));
		productSKUImpl.setCost(this.<BigDecimal>getColumnOriginalValue("cost"));
		productSKUImpl.setMargin(
			this.<BigDecimal>getColumnOriginalValue("margin"));
		productSKUImpl.setStock(this.<Long>getColumnOriginalValue("stock"));
		productSKUImpl.setUom(this.<String>getColumnOriginalValue("uom"));
		productSKUImpl.setMinimumOrderQuantity(
			this.<Long>getColumnOriginalValue("minimumOrderQuantity"));
		productSKUImpl.setMaximumOrderQuantity(
			this.<Long>getColumnOriginalValue("maximumOrderQuantity"));
		productSKUImpl.setLowStockThreshold(
			this.<Long>getColumnOriginalValue("lowStockThreshold"));
		productSKUImpl.setTax(this.<String>getColumnOriginalValue("tax"));
		productSKUImpl.setSkuPublishingDate(
			this.<Date>getColumnOriginalValue("skuPublishingDate"));
		productSKUImpl.setSkuExpiryDate(
			this.<Date>getColumnOriginalValue("skuExpiryDate"));
		productSKUImpl.setImages(this.<String>getColumnOriginalValue("images"));
		productSKUImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		productSKUImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		productSKUImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		productSKUImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		productSKUImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		productSKUImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		productSKUImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		productSKUImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));

		return productSKUImpl;
	}

	@Override
	public int compareTo(ProductSKU productSKU) {
		long primaryKey = productSKU.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductSKU)) {
			return false;
		}

		ProductSKU productSKU = (ProductSKU)object;

		long primaryKey = productSKU.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductSKU> toCacheModel() {
		ProductSKUCacheModel productSKUCacheModel = new ProductSKUCacheModel();

		productSKUCacheModel.uuid = getUuid();

		String uuid = productSKUCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			productSKUCacheModel.uuid = null;
		}

		productSKUCacheModel.productSKUId = getProductSKUId();

		productSKUCacheModel.groupId = getGroupId();

		productSKUCacheModel.draftProductId = getDraftProductId();

		productSKUCacheModel.skuId = getSkuId();

		String skuId = productSKUCacheModel.skuId;

		if ((skuId != null) && (skuId.length() == 0)) {
			productSKUCacheModel.skuId = null;
		}

		productSKUCacheModel.sellerSkuId = getSellerSkuId();

		String sellerSkuId = productSKUCacheModel.sellerSkuId;

		if ((sellerSkuId != null) && (sellerSkuId.length() == 0)) {
			productSKUCacheModel.sellerSkuId = null;
		}

		productSKUCacheModel.skuName = getSkuName();

		String skuName = productSKUCacheModel.skuName;

		if ((skuName != null) && (skuName.length() == 0)) {
			productSKUCacheModel.skuName = null;
		}

		productSKUCacheModel.skuCreationName = getSkuCreationName();

		String skuCreationName = productSKUCacheModel.skuCreationName;

		if ((skuCreationName != null) && (skuCreationName.length() == 0)) {
			productSKUCacheModel.skuCreationName = null;
		}

		productSKUCacheModel.defaultSku = getDefaultSku();

		String defaultSku = productSKUCacheModel.defaultSku;

		if ((defaultSku != null) && (defaultSku.length() == 0)) {
			productSKUCacheModel.defaultSku = null;
		}

		productSKUCacheModel.basePrice = getBasePrice();

		productSKUCacheModel.offerPrice = getOfferPrice();

		productSKUCacheModel.cost = getCost();

		productSKUCacheModel.margin = getMargin();

		productSKUCacheModel.stock = getStock();

		productSKUCacheModel.uom = getUom();

		String uom = productSKUCacheModel.uom;

		if ((uom != null) && (uom.length() == 0)) {
			productSKUCacheModel.uom = null;
		}

		productSKUCacheModel.minimumOrderQuantity = getMinimumOrderQuantity();

		productSKUCacheModel.maximumOrderQuantity = getMaximumOrderQuantity();

		productSKUCacheModel.lowStockThreshold = getLowStockThreshold();

		productSKUCacheModel.tax = getTax();

		String tax = productSKUCacheModel.tax;

		if ((tax != null) && (tax.length() == 0)) {
			productSKUCacheModel.tax = null;
		}

		Date skuPublishingDate = getSkuPublishingDate();

		if (skuPublishingDate != null) {
			productSKUCacheModel.skuPublishingDate =
				skuPublishingDate.getTime();
		}
		else {
			productSKUCacheModel.skuPublishingDate = Long.MIN_VALUE;
		}

		Date skuExpiryDate = getSkuExpiryDate();

		if (skuExpiryDate != null) {
			productSKUCacheModel.skuExpiryDate = skuExpiryDate.getTime();
		}
		else {
			productSKUCacheModel.skuExpiryDate = Long.MIN_VALUE;
		}

		productSKUCacheModel.images = getImages();

		String images = productSKUCacheModel.images;

		if ((images != null) && (images.length() == 0)) {
			productSKUCacheModel.images = null;
		}

		productSKUCacheModel.companyId = getCompanyId();

		productSKUCacheModel.userId = getUserId();

		productSKUCacheModel.userName = getUserName();

		String userName = productSKUCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productSKUCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			productSKUCacheModel.createDate = createDate.getTime();
		}
		else {
			productSKUCacheModel.createDate = Long.MIN_VALUE;
		}

		productSKUCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productSKUCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productSKUCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productSKUCacheModel.modifiedBy = getModifiedBy();

		productSKUCacheModel.ipAddress = getIpAddress();

		String ipAddress = productSKUCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			productSKUCacheModel.ipAddress = null;
		}

		return productSKUCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductSKU, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductSKU, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductSKU, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ProductSKU)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductSKU>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ProductSKU.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _productSKUId;
	private long _groupId;
	private long _draftProductId;
	private String _skuId;
	private String _sellerSkuId;
	private String _skuName;
	private String _skuCreationName;
	private String _defaultSku;
	private BigDecimal _basePrice;
	private BigDecimal _offerPrice;
	private BigDecimal _cost;
	private BigDecimal _margin;
	private long _stock;
	private String _uom;
	private long _minimumOrderQuantity;
	private long _maximumOrderQuantity;
	private long _lowStockThreshold;
	private String _tax;
	private Date _skuPublishingDate;
	private Date _skuExpiryDate;
	private String _images;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private String _ipAddress;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProductSKU, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductSKU)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("productSKUId", _productSKUId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("draftProductId", _draftProductId);
		_columnOriginalValues.put("skuId", _skuId);
		_columnOriginalValues.put("sellerSkuId", _sellerSkuId);
		_columnOriginalValues.put("skuName", _skuName);
		_columnOriginalValues.put("skuCreationName", _skuCreationName);
		_columnOriginalValues.put("defaultSku", _defaultSku);
		_columnOriginalValues.put("basePrice", _basePrice);
		_columnOriginalValues.put("offerPrice", _offerPrice);
		_columnOriginalValues.put("cost", _cost);
		_columnOriginalValues.put("margin", _margin);
		_columnOriginalValues.put("stock", _stock);
		_columnOriginalValues.put("uom", _uom);
		_columnOriginalValues.put(
			"minimumOrderQuantity", _minimumOrderQuantity);
		_columnOriginalValues.put(
			"maximumOrderQuantity", _maximumOrderQuantity);
		_columnOriginalValues.put("lowStockThreshold", _lowStockThreshold);
		_columnOriginalValues.put("tax", _tax);
		_columnOriginalValues.put("skuPublishingDate", _skuPublishingDate);
		_columnOriginalValues.put("skuExpiryDate", _skuExpiryDate);
		_columnOriginalValues.put("images", _images);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("ipAddress", _ipAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("productSKUId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("draftProductId", 8L);

		columnBitmasks.put("skuId", 16L);

		columnBitmasks.put("sellerSkuId", 32L);

		columnBitmasks.put("skuName", 64L);

		columnBitmasks.put("skuCreationName", 128L);

		columnBitmasks.put("defaultSku", 256L);

		columnBitmasks.put("basePrice", 512L);

		columnBitmasks.put("offerPrice", 1024L);

		columnBitmasks.put("cost", 2048L);

		columnBitmasks.put("margin", 4096L);

		columnBitmasks.put("stock", 8192L);

		columnBitmasks.put("uom", 16384L);

		columnBitmasks.put("minimumOrderQuantity", 32768L);

		columnBitmasks.put("maximumOrderQuantity", 65536L);

		columnBitmasks.put("lowStockThreshold", 131072L);

		columnBitmasks.put("tax", 262144L);

		columnBitmasks.put("skuPublishingDate", 524288L);

		columnBitmasks.put("skuExpiryDate", 1048576L);

		columnBitmasks.put("images", 2097152L);

		columnBitmasks.put("companyId", 4194304L);

		columnBitmasks.put("userId", 8388608L);

		columnBitmasks.put("userName", 16777216L);

		columnBitmasks.put("createDate", 33554432L);

		columnBitmasks.put("createdBy", 67108864L);

		columnBitmasks.put("modifiedDate", 134217728L);

		columnBitmasks.put("modifiedBy", 268435456L);

		columnBitmasks.put("ipAddress", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductSKU _escapedModel;

}