/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.product.master.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import com.marketplace.product.master.model.Product;
import com.marketplace.product.master.model.ProductModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Product service. Represents a row in the &quot;marketplace_product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductImpl
 * @generated
 */
public class ProductModelImpl
	extends BaseModelImpl<Product> implements ProductModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the <code>Product</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_product";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"draftProductId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"brandId", Types.BIGINT},
		{"categoryId", Types.BIGINT}, {"productName", Types.VARCHAR},
		{"productType", Types.VARCHAR}, {"shortDescription", Types.VARCHAR},
		{"longDescription", Types.VARCHAR}, {"modelNumber", Types.VARCHAR},
		{"productStatus", Types.VARCHAR}, {"stepNumber", Types.BIGINT},
		{"productMappingId", Types.VARCHAR}, {"taxCategoryId", Types.BIGINT},
		{"cpDefinitionId", Types.BIGINT}, {"vendorId", Types.VARCHAR},
		{"vendorName", Types.VARCHAR}, {"organizationId", Types.VARCHAR},
		{"organizationName", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"ipAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("draftProductId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("brandId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stepNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productMappingId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cpDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vendorId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vendorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_product (uuid_ VARCHAR(75) null,draftProductId LONG not null primary key,groupId LONG,brandId LONG,categoryId LONG,productName STRING null,productType VARCHAR(75) null,shortDescription STRING null,longDescription STRING null,modelNumber VARCHAR(75) null,productStatus VARCHAR(75) null,stepNumber LONG,productMappingId VARCHAR(30) null,taxCategoryId LONG,cpDefinitionId LONG,vendorId VARCHAR(75) null,vendorName VARCHAR(75) null,organizationId VARCHAR(75) null,organizationName VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createdBy LONG,modifiedBy LONG,createDate DATE null,modifiedDate DATE null,ipAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_product";

	public static final String ORDER_BY_JPQL =
		" ORDER BY product.draftProductId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_product.draftProductId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPDEFINITIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRODUCTSTATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VENDORID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DRAFTPRODUCTID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _draftProductId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDraftProductId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _draftProductId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Product.class;
	}

	@Override
	public String getModelClassName() {
		return Product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Product, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Product, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Product, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Product)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Product, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Product, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Product)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Product, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Product, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Product, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Product, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Product, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Product, Object>>();
		Map<String, BiConsumer<Product, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Product, ?>>();

		attributeGetterFunctions.put("uuid", Product::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Product, String>)Product::setUuid);
		attributeGetterFunctions.put(
			"draftProductId", Product::getDraftProductId);
		attributeSetterBiConsumers.put(
			"draftProductId",
			(BiConsumer<Product, Long>)Product::setDraftProductId);
		attributeGetterFunctions.put("groupId", Product::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Product, Long>)Product::setGroupId);
		attributeGetterFunctions.put("brandId", Product::getBrandId);
		attributeSetterBiConsumers.put(
			"brandId", (BiConsumer<Product, Long>)Product::setBrandId);
		attributeGetterFunctions.put("categoryId", Product::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<Product, Long>)Product::setCategoryId);
		attributeGetterFunctions.put("productName", Product::getProductName);
		attributeSetterBiConsumers.put(
			"productName",
			(BiConsumer<Product, String>)Product::setProductName);
		attributeGetterFunctions.put("productType", Product::getProductType);
		attributeSetterBiConsumers.put(
			"productType",
			(BiConsumer<Product, String>)Product::setProductType);
		attributeGetterFunctions.put(
			"shortDescription", Product::getShortDescription);
		attributeSetterBiConsumers.put(
			"shortDescription",
			(BiConsumer<Product, String>)Product::setShortDescription);
		attributeGetterFunctions.put(
			"longDescription", Product::getLongDescription);
		attributeSetterBiConsumers.put(
			"longDescription",
			(BiConsumer<Product, String>)Product::setLongDescription);
		attributeGetterFunctions.put("modelNumber", Product::getModelNumber);
		attributeSetterBiConsumers.put(
			"modelNumber",
			(BiConsumer<Product, String>)Product::setModelNumber);
		attributeGetterFunctions.put(
			"productStatus", Product::getProductStatus);
		attributeSetterBiConsumers.put(
			"productStatus",
			(BiConsumer<Product, String>)Product::setProductStatus);
		attributeGetterFunctions.put("stepNumber", Product::getStepNumber);
		attributeSetterBiConsumers.put(
			"stepNumber", (BiConsumer<Product, Long>)Product::setStepNumber);
		attributeGetterFunctions.put(
			"productMappingId", Product::getProductMappingId);
		attributeSetterBiConsumers.put(
			"productMappingId",
			(BiConsumer<Product, String>)Product::setProductMappingId);
		attributeGetterFunctions.put(
			"taxCategoryId", Product::getTaxCategoryId);
		attributeSetterBiConsumers.put(
			"taxCategoryId",
			(BiConsumer<Product, Long>)Product::setTaxCategoryId);
		attributeGetterFunctions.put(
			"cpDefinitionId", Product::getCpDefinitionId);
		attributeSetterBiConsumers.put(
			"cpDefinitionId",
			(BiConsumer<Product, Long>)Product::setCpDefinitionId);
		attributeGetterFunctions.put("vendorId", Product::getVendorId);
		attributeSetterBiConsumers.put(
			"vendorId", (BiConsumer<Product, String>)Product::setVendorId);
		attributeGetterFunctions.put("vendorName", Product::getVendorName);
		attributeSetterBiConsumers.put(
			"vendorName", (BiConsumer<Product, String>)Product::setVendorName);
		attributeGetterFunctions.put(
			"organizationId", Product::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<Product, String>)Product::setOrganizationId);
		attributeGetterFunctions.put(
			"organizationName", Product::getOrganizationName);
		attributeSetterBiConsumers.put(
			"organizationName",
			(BiConsumer<Product, String>)Product::setOrganizationName);
		attributeGetterFunctions.put("companyId", Product::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Product, Long>)Product::setCompanyId);
		attributeGetterFunctions.put("userId", Product::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Product, Long>)Product::setUserId);
		attributeGetterFunctions.put("userName", Product::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Product, String>)Product::setUserName);
		attributeGetterFunctions.put("createdBy", Product::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy", (BiConsumer<Product, Long>)Product::setCreatedBy);
		attributeGetterFunctions.put("modifiedBy", Product::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy", (BiConsumer<Product, Long>)Product::setModifiedBy);
		attributeGetterFunctions.put("createDate", Product::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Product, Date>)Product::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Product::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Product, Date>)Product::setModifiedDate);
		attributeGetterFunctions.put("ipAddress", Product::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress", (BiConsumer<Product, String>)Product::setIpAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getDraftProductId() {
		return _draftProductId;
	}

	@Override
	public void setDraftProductId(long draftProductId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_draftProductId = draftProductId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getBrandId() {
		return _brandId;
	}

	@Override
	public void setBrandId(long brandId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandId = brandId;
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("categoryId"));
	}

	@Override
	public String getProductName() {
		if (_productName == null) {
			return "";
		}
		else {
			return _productName;
		}
	}

	@Override
	public String getProductName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProductName(languageId);
	}

	@Override
	public String getProductName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProductName(languageId, useDefault);
	}

	@Override
	public String getProductName(String languageId) {
		return LocalizationUtil.getLocalization(getProductName(), languageId);
	}

	@Override
	public String getProductName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProductName(), languageId, useDefault);
	}

	@Override
	public String getProductNameCurrentLanguageId() {
		return _productNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProductNameCurrentValue() {
		Locale locale = getLocale(_productNameCurrentLanguageId);

		return getProductName(locale);
	}

	@Override
	public Map<Locale, String> getProductNameMap() {
		return LocalizationUtil.getLocalizationMap(getProductName());
	}

	@Override
	public void setProductName(String productName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productName = productName;
	}

	@Override
	public void setProductName(String productName, Locale locale) {
		setProductName(productName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProductName(
		String productName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(productName)) {
			setProductName(
				LocalizationUtil.updateLocalization(
					getProductName(), "ProductName", productName, languageId,
					defaultLanguageId));
		}
		else {
			setProductName(
				LocalizationUtil.removeLocalization(
					getProductName(), "ProductName", languageId));
		}
	}

	@Override
	public void setProductNameCurrentLanguageId(String languageId) {
		_productNameCurrentLanguageId = languageId;
	}

	@Override
	public void setProductNameMap(Map<Locale, String> productNameMap) {
		setProductNameMap(productNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProductNameMap(
		Map<Locale, String> productNameMap, Locale defaultLocale) {

		if (productNameMap == null) {
			return;
		}

		setProductName(
			LocalizationUtil.updateLocalization(
				productNameMap, getProductName(), "ProductName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getProductType() {
		if (_productType == null) {
			return "";
		}
		else {
			return _productType;
		}
	}

	@Override
	public void setProductType(String productType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productType = productType;
	}

	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return "";
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public String getShortDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getShortDescription(languageId);
	}

	@Override
	public String getShortDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getShortDescription(languageId, useDefault);
	}

	@Override
	public String getShortDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getShortDescription(), languageId);
	}

	@Override
	public String getShortDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getShortDescription(), languageId, useDefault);
	}

	@Override
	public String getShortDescriptionCurrentLanguageId() {
		return _shortDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getShortDescriptionCurrentValue() {
		Locale locale = getLocale(_shortDescriptionCurrentLanguageId);

		return getShortDescription(locale);
	}

	@Override
	public Map<Locale, String> getShortDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getShortDescription());
	}

	@Override
	public void setShortDescription(String shortDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shortDescription = shortDescription;
	}

	@Override
	public void setShortDescription(String shortDescription, Locale locale) {
		setShortDescription(
			shortDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setShortDescription(
		String shortDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(shortDescription)) {
			setShortDescription(
				LocalizationUtil.updateLocalization(
					getShortDescription(), "ShortDescription", shortDescription,
					languageId, defaultLanguageId));
		}
		else {
			setShortDescription(
				LocalizationUtil.removeLocalization(
					getShortDescription(), "ShortDescription", languageId));
		}
	}

	@Override
	public void setShortDescriptionCurrentLanguageId(String languageId) {
		_shortDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setShortDescriptionMap(
		Map<Locale, String> shortDescriptionMap) {

		setShortDescriptionMap(
			shortDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setShortDescriptionMap(
		Map<Locale, String> shortDescriptionMap, Locale defaultLocale) {

		if (shortDescriptionMap == null) {
			return;
		}

		setShortDescription(
			LocalizationUtil.updateLocalization(
				shortDescriptionMap, getShortDescription(), "ShortDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getLongDescription() {
		if (_longDescription == null) {
			return "";
		}
		else {
			return _longDescription;
		}
	}

	@Override
	public String getLongDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLongDescription(languageId);
	}

	@Override
	public String getLongDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLongDescription(languageId, useDefault);
	}

	@Override
	public String getLongDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getLongDescription(), languageId);
	}

	@Override
	public String getLongDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLongDescription(), languageId, useDefault);
	}

	@Override
	public String getLongDescriptionCurrentLanguageId() {
		return _longDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLongDescriptionCurrentValue() {
		Locale locale = getLocale(_longDescriptionCurrentLanguageId);

		return getLongDescription(locale);
	}

	@Override
	public Map<Locale, String> getLongDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getLongDescription());
	}

	@Override
	public void setLongDescription(String longDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longDescription = longDescription;
	}

	@Override
	public void setLongDescription(String longDescription, Locale locale) {
		setLongDescription(
			longDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLongDescription(
		String longDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(longDescription)) {
			setLongDescription(
				LocalizationUtil.updateLocalization(
					getLongDescription(), "LongDescription", longDescription,
					languageId, defaultLanguageId));
		}
		else {
			setLongDescription(
				LocalizationUtil.removeLocalization(
					getLongDescription(), "LongDescription", languageId));
		}
	}

	@Override
	public void setLongDescriptionCurrentLanguageId(String languageId) {
		_longDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setLongDescriptionMap(Map<Locale, String> longDescriptionMap) {
		setLongDescriptionMap(longDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLongDescriptionMap(
		Map<Locale, String> longDescriptionMap, Locale defaultLocale) {

		if (longDescriptionMap == null) {
			return;
		}

		setLongDescription(
			LocalizationUtil.updateLocalization(
				longDescriptionMap, getLongDescription(), "LongDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getModelNumber() {
		if (_modelNumber == null) {
			return "";
		}
		else {
			return _modelNumber;
		}
	}

	@Override
	public void setModelNumber(String modelNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modelNumber = modelNumber;
	}

	@Override
	public String getProductStatus() {
		if (_productStatus == null) {
			return "";
		}
		else {
			return _productStatus;
		}
	}

	@Override
	public void setProductStatus(String productStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productStatus = productStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProductStatus() {
		return getColumnOriginalValue("productStatus");
	}

	@Override
	public long getStepNumber() {
		return _stepNumber;
	}

	@Override
	public void setStepNumber(long stepNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stepNumber = stepNumber;
	}

	@Override
	public String getProductMappingId() {
		if (_productMappingId == null) {
			return "";
		}
		else {
			return _productMappingId;
		}
	}

	@Override
	public void setProductMappingId(String productMappingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productMappingId = productMappingId;
	}

	@Override
	public long getTaxCategoryId() {
		return _taxCategoryId;
	}

	@Override
	public void setTaxCategoryId(long taxCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxCategoryId = taxCategoryId;
	}

	@Override
	public long getCpDefinitionId() {
		return _cpDefinitionId;
	}

	@Override
	public void setCpDefinitionId(long cpDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cpDefinitionId = cpDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCpDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cpDefinitionId"));
	}

	@Override
	public String getVendorId() {
		if (_vendorId == null) {
			return "";
		}
		else {
			return _vendorId;
		}
	}

	@Override
	public void setVendorId(String vendorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vendorId = vendorId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalVendorId() {
		return getColumnOriginalValue("vendorId");
	}

	@Override
	public String getVendorName() {
		if (_vendorName == null) {
			return "";
		}
		else {
			return _vendorName;
		}
	}

	@Override
	public void setVendorName(String vendorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vendorName = vendorName;
	}

	@Override
	public String getOrganizationId() {
		if (_organizationId == null) {
			return "";
		}
		else {
			return _organizationId;
		}
	}

	@Override
	public void setOrganizationId(String organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalOrganizationId() {
		return getColumnOriginalValue("organizationId");
	}

	@Override
	public String getOrganizationName() {
		if (_organizationName == null) {
			return "";
		}
		else {
			return _organizationName;
		}
	}

	@Override
	public void setOrganizationName(String organizationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationName = organizationName;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Product.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> productNameMap = getProductNameMap();

		for (Map.Entry<Locale, String> entry : productNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> shortDescriptionMap = getShortDescriptionMap();

		for (Map.Entry<Locale, String> entry : shortDescriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> longDescriptionMap = getLongDescriptionMap();

		for (Map.Entry<Locale, String> entry : longDescriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getProductName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Product.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String productName = getProductName(defaultLocale);

		if (Validator.isNull(productName)) {
			setProductName(
				getProductName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProductName(
				getProductName(defaultLocale), defaultLocale, defaultLocale);
		}

		String shortDescription = getShortDescription(defaultLocale);

		if (Validator.isNull(shortDescription)) {
			setShortDescription(
				getShortDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setShortDescription(
				getShortDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String longDescription = getLongDescription(defaultLocale);

		if (Validator.isNull(longDescription)) {
			setLongDescription(
				getLongDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLongDescription(
				getLongDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Product toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Product>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setUuid(getUuid());
		productImpl.setDraftProductId(getDraftProductId());
		productImpl.setGroupId(getGroupId());
		productImpl.setBrandId(getBrandId());
		productImpl.setCategoryId(getCategoryId());
		productImpl.setProductName(getProductName());
		productImpl.setProductType(getProductType());
		productImpl.setShortDescription(getShortDescription());
		productImpl.setLongDescription(getLongDescription());
		productImpl.setModelNumber(getModelNumber());
		productImpl.setProductStatus(getProductStatus());
		productImpl.setStepNumber(getStepNumber());
		productImpl.setProductMappingId(getProductMappingId());
		productImpl.setTaxCategoryId(getTaxCategoryId());
		productImpl.setCpDefinitionId(getCpDefinitionId());
		productImpl.setVendorId(getVendorId());
		productImpl.setVendorName(getVendorName());
		productImpl.setOrganizationId(getOrganizationId());
		productImpl.setOrganizationName(getOrganizationName());
		productImpl.setCompanyId(getCompanyId());
		productImpl.setUserId(getUserId());
		productImpl.setUserName(getUserName());
		productImpl.setCreatedBy(getCreatedBy());
		productImpl.setModifiedBy(getModifiedBy());
		productImpl.setCreateDate(getCreateDate());
		productImpl.setModifiedDate(getModifiedDate());
		productImpl.setIpAddress(getIpAddress());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public Product cloneWithOriginalValues() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		productImpl.setDraftProductId(
			this.<Long>getColumnOriginalValue("draftProductId"));
		productImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		productImpl.setBrandId(this.<Long>getColumnOriginalValue("brandId"));
		productImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		productImpl.setProductName(
			this.<String>getColumnOriginalValue("productName"));
		productImpl.setProductType(
			this.<String>getColumnOriginalValue("productType"));
		productImpl.setShortDescription(
			this.<String>getColumnOriginalValue("shortDescription"));
		productImpl.setLongDescription(
			this.<String>getColumnOriginalValue("longDescription"));
		productImpl.setModelNumber(
			this.<String>getColumnOriginalValue("modelNumber"));
		productImpl.setProductStatus(
			this.<String>getColumnOriginalValue("productStatus"));
		productImpl.setStepNumber(
			this.<Long>getColumnOriginalValue("stepNumber"));
		productImpl.setProductMappingId(
			this.<String>getColumnOriginalValue("productMappingId"));
		productImpl.setTaxCategoryId(
			this.<Long>getColumnOriginalValue("taxCategoryId"));
		productImpl.setCpDefinitionId(
			this.<Long>getColumnOriginalValue("cpDefinitionId"));
		productImpl.setVendorId(
			this.<String>getColumnOriginalValue("vendorId"));
		productImpl.setVendorName(
			this.<String>getColumnOriginalValue("vendorName"));
		productImpl.setOrganizationId(
			this.<String>getColumnOriginalValue("organizationId"));
		productImpl.setOrganizationName(
			this.<String>getColumnOriginalValue("organizationName"));
		productImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		productImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		productImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		productImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		productImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		productImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		productImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		productImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));

		return productImpl;
	}

	@Override
	public int compareTo(Product product) {
		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Product)) {
			return false;
		}

		Product product = (Product)object;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Product> toCacheModel() {
		ProductCacheModel productCacheModel = new ProductCacheModel();

		productCacheModel.uuid = getUuid();

		String uuid = productCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			productCacheModel.uuid = null;
		}

		productCacheModel.draftProductId = getDraftProductId();

		productCacheModel.groupId = getGroupId();

		productCacheModel.brandId = getBrandId();

		productCacheModel.categoryId = getCategoryId();

		productCacheModel.productName = getProductName();

		String productName = productCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			productCacheModel.productName = null;
		}

		productCacheModel.productType = getProductType();

		String productType = productCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			productCacheModel.productType = null;
		}

		productCacheModel.shortDescription = getShortDescription();

		String shortDescription = productCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			productCacheModel.shortDescription = null;
		}

		productCacheModel.longDescription = getLongDescription();

		String longDescription = productCacheModel.longDescription;

		if ((longDescription != null) && (longDescription.length() == 0)) {
			productCacheModel.longDescription = null;
		}

		productCacheModel.modelNumber = getModelNumber();

		String modelNumber = productCacheModel.modelNumber;

		if ((modelNumber != null) && (modelNumber.length() == 0)) {
			productCacheModel.modelNumber = null;
		}

		productCacheModel.productStatus = getProductStatus();

		String productStatus = productCacheModel.productStatus;

		if ((productStatus != null) && (productStatus.length() == 0)) {
			productCacheModel.productStatus = null;
		}

		productCacheModel.stepNumber = getStepNumber();

		productCacheModel.productMappingId = getProductMappingId();

		String productMappingId = productCacheModel.productMappingId;

		if ((productMappingId != null) && (productMappingId.length() == 0)) {
			productCacheModel.productMappingId = null;
		}

		productCacheModel.taxCategoryId = getTaxCategoryId();

		productCacheModel.cpDefinitionId = getCpDefinitionId();

		productCacheModel.vendorId = getVendorId();

		String vendorId = productCacheModel.vendorId;

		if ((vendorId != null) && (vendorId.length() == 0)) {
			productCacheModel.vendorId = null;
		}

		productCacheModel.vendorName = getVendorName();

		String vendorName = productCacheModel.vendorName;

		if ((vendorName != null) && (vendorName.length() == 0)) {
			productCacheModel.vendorName = null;
		}

		productCacheModel.organizationId = getOrganizationId();

		String organizationId = productCacheModel.organizationId;

		if ((organizationId != null) && (organizationId.length() == 0)) {
			productCacheModel.organizationId = null;
		}

		productCacheModel.organizationName = getOrganizationName();

		String organizationName = productCacheModel.organizationName;

		if ((organizationName != null) && (organizationName.length() == 0)) {
			productCacheModel.organizationName = null;
		}

		productCacheModel.companyId = getCompanyId();

		productCacheModel.userId = getUserId();

		productCacheModel.userName = getUserName();

		String userName = productCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productCacheModel.userName = null;
		}

		productCacheModel.createdBy = getCreatedBy();

		productCacheModel.modifiedBy = getModifiedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			productCacheModel.createDate = createDate.getTime();
		}
		else {
			productCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productCacheModel.ipAddress = getIpAddress();

		String ipAddress = productCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			productCacheModel.ipAddress = null;
		}

		return productCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Product, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Product, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Product, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Product)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Product>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Product.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _draftProductId;
	private long _groupId;
	private long _brandId;
	private long _categoryId;
	private String _productName;
	private String _productNameCurrentLanguageId;
	private String _productType;
	private String _shortDescription;
	private String _shortDescriptionCurrentLanguageId;
	private String _longDescription;
	private String _longDescriptionCurrentLanguageId;
	private String _modelNumber;
	private String _productStatus;
	private long _stepNumber;
	private String _productMappingId;
	private long _taxCategoryId;
	private long _cpDefinitionId;
	private String _vendorId;
	private String _vendorName;
	private String _organizationId;
	private String _organizationName;
	private long _companyId;
	private long _userId;
	private String _userName;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _ipAddress;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Product, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Product)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("draftProductId", _draftProductId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("brandId", _brandId);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("productName", _productName);
		_columnOriginalValues.put("productType", _productType);
		_columnOriginalValues.put("shortDescription", _shortDescription);
		_columnOriginalValues.put("longDescription", _longDescription);
		_columnOriginalValues.put("modelNumber", _modelNumber);
		_columnOriginalValues.put("productStatus", _productStatus);
		_columnOriginalValues.put("stepNumber", _stepNumber);
		_columnOriginalValues.put("productMappingId", _productMappingId);
		_columnOriginalValues.put("taxCategoryId", _taxCategoryId);
		_columnOriginalValues.put("cpDefinitionId", _cpDefinitionId);
		_columnOriginalValues.put("vendorId", _vendorId);
		_columnOriginalValues.put("vendorName", _vendorName);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("organizationName", _organizationName);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("ipAddress", _ipAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("draftProductId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("brandId", 8L);

		columnBitmasks.put("categoryId", 16L);

		columnBitmasks.put("productName", 32L);

		columnBitmasks.put("productType", 64L);

		columnBitmasks.put("shortDescription", 128L);

		columnBitmasks.put("longDescription", 256L);

		columnBitmasks.put("modelNumber", 512L);

		columnBitmasks.put("productStatus", 1024L);

		columnBitmasks.put("stepNumber", 2048L);

		columnBitmasks.put("productMappingId", 4096L);

		columnBitmasks.put("taxCategoryId", 8192L);

		columnBitmasks.put("cpDefinitionId", 16384L);

		columnBitmasks.put("vendorId", 32768L);

		columnBitmasks.put("vendorName", 65536L);

		columnBitmasks.put("organizationId", 131072L);

		columnBitmasks.put("organizationName", 262144L);

		columnBitmasks.put("companyId", 524288L);

		columnBitmasks.put("userId", 1048576L);

		columnBitmasks.put("userName", 2097152L);

		columnBitmasks.put("createdBy", 4194304L);

		columnBitmasks.put("modifiedBy", 8388608L);

		columnBitmasks.put("createDate", 16777216L);

		columnBitmasks.put("modifiedDate", 33554432L);

		columnBitmasks.put("ipAddress", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Product _escapedModel;

}