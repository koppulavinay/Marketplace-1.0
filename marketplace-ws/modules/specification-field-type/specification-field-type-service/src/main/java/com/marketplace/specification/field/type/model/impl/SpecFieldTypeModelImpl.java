/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marketplace.specification.field.type.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.marketplace.specification.field.type.model.SpecFieldType;
import com.marketplace.specification.field.type.model.SpecFieldTypeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SpecFieldType service. Represents a row in the &quot;marketplace_specfieldtype&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SpecFieldTypeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpecFieldTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpecFieldTypeImpl
 * @generated
 */
public class SpecFieldTypeModelImpl
	extends BaseModelImpl<SpecFieldType> implements SpecFieldTypeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a spec field type model instance should use the <code>SpecFieldType</code> interface instead.
	 */
	public static final String TABLE_NAME = "marketplace_specfieldtype";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"specFieldTypeId", Types.BIGINT},
		{"fieldTypeName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specFieldTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fieldTypeName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table marketplace_specfieldtype (uuid_ VARCHAR(75) null,specFieldTypeId LONG not null primary key,fieldTypeName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table marketplace_specfieldtype";

	public static final String ORDER_BY_JPQL =
		" ORDER BY specFieldType.specFieldTypeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY marketplace_specfieldtype.specFieldTypeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPECFIELDTYPEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SpecFieldTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _specFieldTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpecFieldTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _specFieldTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpecFieldType.class;
	}

	@Override
	public String getModelClassName() {
		return SpecFieldType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SpecFieldType, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SpecFieldType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SpecFieldType, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SpecFieldType)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SpecFieldType, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SpecFieldType, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SpecFieldType)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SpecFieldType, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SpecFieldType, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SpecFieldType, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SpecFieldType, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SpecFieldType, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SpecFieldType, Object>>();
		Map<String, BiConsumer<SpecFieldType, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SpecFieldType, ?>>();

		attributeGetterFunctions.put("uuid", SpecFieldType::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<SpecFieldType, String>)SpecFieldType::setUuid);
		attributeGetterFunctions.put(
			"specFieldTypeId", SpecFieldType::getSpecFieldTypeId);
		attributeSetterBiConsumers.put(
			"specFieldTypeId",
			(BiConsumer<SpecFieldType, Long>)SpecFieldType::setSpecFieldTypeId);
		attributeGetterFunctions.put(
			"fieldTypeName", SpecFieldType::getFieldTypeName);
		attributeSetterBiConsumers.put(
			"fieldTypeName",
			(BiConsumer<SpecFieldType, String>)SpecFieldType::setFieldTypeName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getSpecFieldTypeId() {
		return _specFieldTypeId;
	}

	@Override
	public void setSpecFieldTypeId(long specFieldTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specFieldTypeId = specFieldTypeId;
	}

	@Override
	public String getFieldTypeName() {
		if (_fieldTypeName == null) {
			return "";
		}
		else {
			return _fieldTypeName;
		}
	}

	@Override
	public void setFieldTypeName(String fieldTypeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fieldTypeName = fieldTypeName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SpecFieldType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpecFieldType toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SpecFieldType>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpecFieldTypeImpl specFieldTypeImpl = new SpecFieldTypeImpl();

		specFieldTypeImpl.setUuid(getUuid());
		specFieldTypeImpl.setSpecFieldTypeId(getSpecFieldTypeId());
		specFieldTypeImpl.setFieldTypeName(getFieldTypeName());

		specFieldTypeImpl.resetOriginalValues();

		return specFieldTypeImpl;
	}

	@Override
	public SpecFieldType cloneWithOriginalValues() {
		SpecFieldTypeImpl specFieldTypeImpl = new SpecFieldTypeImpl();

		specFieldTypeImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		specFieldTypeImpl.setSpecFieldTypeId(
			this.<Long>getColumnOriginalValue("specFieldTypeId"));
		specFieldTypeImpl.setFieldTypeName(
			this.<String>getColumnOriginalValue("fieldTypeName"));

		return specFieldTypeImpl;
	}

	@Override
	public int compareTo(SpecFieldType specFieldType) {
		long primaryKey = specFieldType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SpecFieldType)) {
			return false;
		}

		SpecFieldType specFieldType = (SpecFieldType)object;

		long primaryKey = specFieldType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SpecFieldType> toCacheModel() {
		SpecFieldTypeCacheModel specFieldTypeCacheModel =
			new SpecFieldTypeCacheModel();

		specFieldTypeCacheModel.uuid = getUuid();

		String uuid = specFieldTypeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			specFieldTypeCacheModel.uuid = null;
		}

		specFieldTypeCacheModel.specFieldTypeId = getSpecFieldTypeId();

		specFieldTypeCacheModel.fieldTypeName = getFieldTypeName();

		String fieldTypeName = specFieldTypeCacheModel.fieldTypeName;

		if ((fieldTypeName != null) && (fieldTypeName.length() == 0)) {
			specFieldTypeCacheModel.fieldTypeName = null;
		}

		return specFieldTypeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SpecFieldType, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SpecFieldType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SpecFieldType, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SpecFieldType)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SpecFieldType>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SpecFieldType.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _specFieldTypeId;
	private String _fieldTypeName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SpecFieldType, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SpecFieldType)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("specFieldTypeId", _specFieldTypeId);
		_columnOriginalValues.put("fieldTypeName", _fieldTypeName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("specFieldTypeId", 2L);

		columnBitmasks.put("fieldTypeName", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SpecFieldType _escapedModel;

}